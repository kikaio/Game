// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: UserAndGameServer.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef UserAndGameServer_2eproto_2epb_2eh
#define UserAndGameServer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_UserAndGameServer_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_UserAndGameServer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_UserAndGameServer_2eproto;
namespace UserAndGameServer {
class ANS_CONNECT;
struct ANS_CONNECTDefaultTypeInternal;
extern ANS_CONNECTDefaultTypeInternal _ANS_CONNECT_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ANS_CONNECT_class_data_;
class ANS_PUBLIC_KEY;
struct ANS_PUBLIC_KEYDefaultTypeInternal;
extern ANS_PUBLIC_KEYDefaultTypeInternal _ANS_PUBLIC_KEY_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ANS_PUBLIC_KEY_class_data_;
class ERROR_INFO;
struct ERROR_INFODefaultTypeInternal;
extern ERROR_INFODefaultTypeInternal _ERROR_INFO_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ERROR_INFO_class_data_;
class REQ_CONNECT;
struct REQ_CONNECTDefaultTypeInternal;
extern REQ_CONNECTDefaultTypeInternal _REQ_CONNECT_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull REQ_CONNECT_class_data_;
class REQ_PUBLIC_KEY;
struct REQ_PUBLIC_KEYDefaultTypeInternal;
extern REQ_PUBLIC_KEYDefaultTypeInternal _REQ_PUBLIC_KEY_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull REQ_PUBLIC_KEY_class_data_;
class REQ_TEST_MSG;
struct REQ_TEST_MSGDefaultTypeInternal;
extern REQ_TEST_MSGDefaultTypeInternal _REQ_TEST_MSG_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull REQ_TEST_MSG_class_data_;
}  // namespace UserAndGameServer
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace UserAndGameServer {
enum MsgType : int {
  UNEXPECTED = 0,
  REQ = 1,
  ANS = 2,
  NOTI = 3,
  ERR = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
constexpr MsgType MsgType_MIN = static_cast<MsgType>(0);
constexpr MsgType MsgType_MAX = static_cast<MsgType>(4);
constexpr int MsgType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return MsgType_Name(static_cast<MsgType>(value));
}
template <>
inline const std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class REQ_TEST_MSG final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.REQ_TEST_MSG) */ {
 public:
  inline REQ_TEST_MSG() : REQ_TEST_MSG(nullptr) {}
  ~REQ_TEST_MSG() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(REQ_TEST_MSG* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(REQ_TEST_MSG));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR REQ_TEST_MSG(
      ::google::protobuf::internal::ConstantInitialized);

  inline REQ_TEST_MSG(const REQ_TEST_MSG& from) : REQ_TEST_MSG(nullptr, from) {}
  inline REQ_TEST_MSG(REQ_TEST_MSG&& from) noexcept
      : REQ_TEST_MSG(nullptr, std::move(from)) {}
  inline REQ_TEST_MSG& operator=(const REQ_TEST_MSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline REQ_TEST_MSG& operator=(REQ_TEST_MSG&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const REQ_TEST_MSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const REQ_TEST_MSG* internal_default_instance() {
    return reinterpret_cast<const REQ_TEST_MSG*>(
        &_REQ_TEST_MSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(REQ_TEST_MSG& a, REQ_TEST_MSG& b) { a.Swap(&b); }
  inline void Swap(REQ_TEST_MSG* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(REQ_TEST_MSG* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  REQ_TEST_MSG* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<REQ_TEST_MSG>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const REQ_TEST_MSG& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const REQ_TEST_MSG& from) { REQ_TEST_MSG::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(REQ_TEST_MSG* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.REQ_TEST_MSG"; }

 protected:
  explicit REQ_TEST_MSG(::google::protobuf::Arena* arena);
  REQ_TEST_MSG(::google::protobuf::Arena* arena, const REQ_TEST_MSG& from);
  REQ_TEST_MSG(::google::protobuf::Arena* arena, REQ_TEST_MSG&& from) noexcept
      : REQ_TEST_MSG(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.REQ_TEST_MSG)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const REQ_TEST_MSG& from_msg);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull REQ_TEST_MSG_class_data_;
// -------------------------------------------------------------------

class REQ_PUBLIC_KEY final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.REQ_PUBLIC_KEY) */ {
 public:
  inline REQ_PUBLIC_KEY() : REQ_PUBLIC_KEY(nullptr) {}
  ~REQ_PUBLIC_KEY() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(REQ_PUBLIC_KEY* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(REQ_PUBLIC_KEY));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR REQ_PUBLIC_KEY(
      ::google::protobuf::internal::ConstantInitialized);

  inline REQ_PUBLIC_KEY(const REQ_PUBLIC_KEY& from) : REQ_PUBLIC_KEY(nullptr, from) {}
  inline REQ_PUBLIC_KEY(REQ_PUBLIC_KEY&& from) noexcept
      : REQ_PUBLIC_KEY(nullptr, std::move(from)) {}
  inline REQ_PUBLIC_KEY& operator=(const REQ_PUBLIC_KEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline REQ_PUBLIC_KEY& operator=(REQ_PUBLIC_KEY&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const REQ_PUBLIC_KEY& default_instance() {
    return *internal_default_instance();
  }
  static inline const REQ_PUBLIC_KEY* internal_default_instance() {
    return reinterpret_cast<const REQ_PUBLIC_KEY*>(
        &_REQ_PUBLIC_KEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(REQ_PUBLIC_KEY& a, REQ_PUBLIC_KEY& b) { a.Swap(&b); }
  inline void Swap(REQ_PUBLIC_KEY* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(REQ_PUBLIC_KEY* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  REQ_PUBLIC_KEY* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<REQ_PUBLIC_KEY>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const REQ_PUBLIC_KEY& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const REQ_PUBLIC_KEY& from) { REQ_PUBLIC_KEY::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(REQ_PUBLIC_KEY* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.REQ_PUBLIC_KEY"; }

 protected:
  explicit REQ_PUBLIC_KEY(::google::protobuf::Arena* arena);
  REQ_PUBLIC_KEY(::google::protobuf::Arena* arena, const REQ_PUBLIC_KEY& from);
  REQ_PUBLIC_KEY(::google::protobuf::Arena* arena, REQ_PUBLIC_KEY&& from) noexcept
      : REQ_PUBLIC_KEY(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.REQ_PUBLIC_KEY)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const REQ_PUBLIC_KEY& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull REQ_PUBLIC_KEY_class_data_;
// -------------------------------------------------------------------

class REQ_CONNECT final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.REQ_CONNECT) */ {
 public:
  inline REQ_CONNECT() : REQ_CONNECT(nullptr) {}
  ~REQ_CONNECT() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(REQ_CONNECT* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(REQ_CONNECT));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR REQ_CONNECT(
      ::google::protobuf::internal::ConstantInitialized);

  inline REQ_CONNECT(const REQ_CONNECT& from) : REQ_CONNECT(nullptr, from) {}
  inline REQ_CONNECT(REQ_CONNECT&& from) noexcept
      : REQ_CONNECT(nullptr, std::move(from)) {}
  inline REQ_CONNECT& operator=(const REQ_CONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline REQ_CONNECT& operator=(REQ_CONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const REQ_CONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const REQ_CONNECT* internal_default_instance() {
    return reinterpret_cast<const REQ_CONNECT*>(
        &_REQ_CONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(REQ_CONNECT& a, REQ_CONNECT& b) { a.Swap(&b); }
  inline void Swap(REQ_CONNECT* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(REQ_CONNECT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  REQ_CONNECT* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<REQ_CONNECT>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const REQ_CONNECT& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const REQ_CONNECT& from) { REQ_CONNECT::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(REQ_CONNECT* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.REQ_CONNECT"; }

 protected:
  explicit REQ_CONNECT(::google::protobuf::Arena* arena);
  REQ_CONNECT(::google::protobuf::Arena* arena, const REQ_CONNECT& from);
  REQ_CONNECT(::google::protobuf::Arena* arena, REQ_CONNECT&& from) noexcept
      : REQ_CONNECT(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.REQ_CONNECT)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const REQ_CONNECT& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull REQ_CONNECT_class_data_;
// -------------------------------------------------------------------

class ERROR_INFO final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ERROR_INFO) */ {
 public:
  inline ERROR_INFO() : ERROR_INFO(nullptr) {}
  ~ERROR_INFO() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ERROR_INFO* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ERROR_INFO));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ERROR_INFO(
      ::google::protobuf::internal::ConstantInitialized);

  inline ERROR_INFO(const ERROR_INFO& from) : ERROR_INFO(nullptr, from) {}
  inline ERROR_INFO(ERROR_INFO&& from) noexcept
      : ERROR_INFO(nullptr, std::move(from)) {}
  inline ERROR_INFO& operator=(const ERROR_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERROR_INFO& operator=(ERROR_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ERROR_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const ERROR_INFO* internal_default_instance() {
    return reinterpret_cast<const ERROR_INFO*>(
        &_ERROR_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ERROR_INFO& a, ERROR_INFO& b) { a.Swap(&b); }
  inline void Swap(ERROR_INFO* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERROR_INFO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ERROR_INFO* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ERROR_INFO>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ERROR_INFO& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ERROR_INFO& from) { ERROR_INFO::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ERROR_INFO* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ERROR_INFO"; }

 protected:
  explicit ERROR_INFO(::google::protobuf::Arena* arena);
  ERROR_INFO(::google::protobuf::Arena* arena, const ERROR_INFO& from);
  ERROR_INFO(::google::protobuf::Arena* arena, ERROR_INFO&& from) noexcept
      : ERROR_INFO(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorDescFieldNumber = 2,
    kErrorNoFieldNumber = 1,
  };
  // string error_desc = 2;
  void clear_error_desc() ;
  const std::string& error_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_desc(Arg_&& arg, Args_... args);
  std::string* mutable_error_desc();
  PROTOBUF_NODISCARD std::string* release_error_desc();
  void set_allocated_error_desc(std::string* value);

  private:
  const std::string& _internal_error_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_desc(
      const std::string& value);
  std::string* _internal_mutable_error_desc();

  public:
  // uint64 error_no = 1;
  void clear_error_no() ;
  ::uint64_t error_no() const;
  void set_error_no(::uint64_t value);

  private:
  ::uint64_t _internal_error_no() const;
  void _internal_set_error_no(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ERROR_INFO)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ERROR_INFO& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_desc_;
    ::uint64_t error_no_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ERROR_INFO_class_data_;
// -------------------------------------------------------------------

class ANS_PUBLIC_KEY final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ANS_PUBLIC_KEY) */ {
 public:
  inline ANS_PUBLIC_KEY() : ANS_PUBLIC_KEY(nullptr) {}
  ~ANS_PUBLIC_KEY() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ANS_PUBLIC_KEY* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ANS_PUBLIC_KEY));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ANS_PUBLIC_KEY(
      ::google::protobuf::internal::ConstantInitialized);

  inline ANS_PUBLIC_KEY(const ANS_PUBLIC_KEY& from) : ANS_PUBLIC_KEY(nullptr, from) {}
  inline ANS_PUBLIC_KEY(ANS_PUBLIC_KEY&& from) noexcept
      : ANS_PUBLIC_KEY(nullptr, std::move(from)) {}
  inline ANS_PUBLIC_KEY& operator=(const ANS_PUBLIC_KEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline ANS_PUBLIC_KEY& operator=(ANS_PUBLIC_KEY&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ANS_PUBLIC_KEY& default_instance() {
    return *internal_default_instance();
  }
  static inline const ANS_PUBLIC_KEY* internal_default_instance() {
    return reinterpret_cast<const ANS_PUBLIC_KEY*>(
        &_ANS_PUBLIC_KEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ANS_PUBLIC_KEY& a, ANS_PUBLIC_KEY& b) { a.Swap(&b); }
  inline void Swap(ANS_PUBLIC_KEY* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ANS_PUBLIC_KEY* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ANS_PUBLIC_KEY* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ANS_PUBLIC_KEY>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ANS_PUBLIC_KEY& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ANS_PUBLIC_KEY& from) { ANS_PUBLIC_KEY::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ANS_PUBLIC_KEY* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ANS_PUBLIC_KEY"; }

 protected:
  explicit ANS_PUBLIC_KEY(::google::protobuf::Arena* arena);
  ANS_PUBLIC_KEY(::google::protobuf::Arena* arena, const ANS_PUBLIC_KEY& from);
  ANS_PUBLIC_KEY(::google::protobuf::Arena* arena, ANS_PUBLIC_KEY&& from) noexcept
      : ANS_PUBLIC_KEY(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // string public_key = 1;
  void clear_public_key() ;
  const std::string& public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* value);

  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(
      const std::string& value);
  std::string* _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ANS_PUBLIC_KEY)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ANS_PUBLIC_KEY& from_msg);
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ANS_PUBLIC_KEY_class_data_;
// -------------------------------------------------------------------

class ANS_CONNECT final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ANS_CONNECT) */ {
 public:
  inline ANS_CONNECT() : ANS_CONNECT(nullptr) {}
  ~ANS_CONNECT() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ANS_CONNECT* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ANS_CONNECT));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ANS_CONNECT(
      ::google::protobuf::internal::ConstantInitialized);

  inline ANS_CONNECT(const ANS_CONNECT& from) : ANS_CONNECT(nullptr, from) {}
  inline ANS_CONNECT(ANS_CONNECT&& from) noexcept
      : ANS_CONNECT(nullptr, std::move(from)) {}
  inline ANS_CONNECT& operator=(const ANS_CONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline ANS_CONNECT& operator=(ANS_CONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ANS_CONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const ANS_CONNECT* internal_default_instance() {
    return reinterpret_cast<const ANS_CONNECT*>(
        &_ANS_CONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ANS_CONNECT& a, ANS_CONNECT& b) { a.Swap(&b); }
  inline void Swap(ANS_CONNECT* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ANS_CONNECT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ANS_CONNECT* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ANS_CONNECT>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ANS_CONNECT& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ANS_CONNECT& from) { ANS_CONNECT::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ANS_CONNECT* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ANS_CONNECT"; }

 protected:
  explicit ANS_CONNECT(::google::protobuf::Arena* arena);
  ANS_CONNECT(::google::protobuf::Arena* arena, const ANS_CONNECT& from);
  ANS_CONNECT(::google::protobuf::Arena* arena, ANS_CONNECT&& from) noexcept
      : ANS_CONNECT(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 2,
    kIsSuccessFieldNumber = 1,
  };
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // bool is_success = 1;
  void clear_is_success() ;
  bool is_success() const;
  void set_is_success(bool value);

  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ANS_CONNECT)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ANS_CONNECT& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    bool is_success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ANS_CONNECT_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ERROR_INFO

// uint64 error_no = 1;
inline void ERROR_INFO::clear_error_no() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_no_ = ::uint64_t{0u};
}
inline ::uint64_t ERROR_INFO::error_no() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ERROR_INFO.error_no)
  return _internal_error_no();
}
inline void ERROR_INFO::set_error_no(::uint64_t value) {
  _internal_set_error_no(value);
  // @@protoc_insertion_point(field_set:UserAndGameServer.ERROR_INFO.error_no)
}
inline ::uint64_t ERROR_INFO::_internal_error_no() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_no_;
}
inline void ERROR_INFO::_internal_set_error_no(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_no_ = value;
}

// string error_desc = 2;
inline void ERROR_INFO::clear_error_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_desc_.ClearToEmpty();
}
inline const std::string& ERROR_INFO::error_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ERROR_INFO.error_desc)
  return _internal_error_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ERROR_INFO::set_error_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ERROR_INFO.error_desc)
}
inline std::string* ERROR_INFO::mutable_error_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_desc();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ERROR_INFO.error_desc)
  return _s;
}
inline const std::string& ERROR_INFO::_internal_error_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_desc_.Get();
}
inline void ERROR_INFO::_internal_set_error_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_desc_.Set(value, GetArena());
}
inline std::string* ERROR_INFO::_internal_mutable_error_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_desc_.Mutable( GetArena());
}
inline std::string* ERROR_INFO::release_error_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ERROR_INFO.error_desc)
  return _impl_.error_desc_.Release();
}
inline void ERROR_INFO::set_allocated_error_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_desc_.IsDefault()) {
    _impl_.error_desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ERROR_INFO.error_desc)
}

// -------------------------------------------------------------------

// REQ_PUBLIC_KEY

// string device_id = 1;
inline void REQ_PUBLIC_KEY::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& REQ_PUBLIC_KEY::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.REQ_PUBLIC_KEY.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void REQ_PUBLIC_KEY::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.REQ_PUBLIC_KEY.device_id)
}
inline std::string* REQ_PUBLIC_KEY::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.REQ_PUBLIC_KEY.device_id)
  return _s;
}
inline const std::string& REQ_PUBLIC_KEY::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void REQ_PUBLIC_KEY::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* REQ_PUBLIC_KEY::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* REQ_PUBLIC_KEY::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.REQ_PUBLIC_KEY.device_id)
  return _impl_.device_id_.Release();
}
inline void REQ_PUBLIC_KEY::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.REQ_PUBLIC_KEY.device_id)
}

// -------------------------------------------------------------------

// ANS_PUBLIC_KEY

// string public_key = 1;
inline void ANS_PUBLIC_KEY::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& ANS_PUBLIC_KEY::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ANS_PUBLIC_KEY.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ANS_PUBLIC_KEY::set_public_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ANS_PUBLIC_KEY.public_key)
}
inline std::string* ANS_PUBLIC_KEY::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ANS_PUBLIC_KEY.public_key)
  return _s;
}
inline const std::string& ANS_PUBLIC_KEY::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void ANS_PUBLIC_KEY::_internal_set_public_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.Set(value, GetArena());
}
inline std::string* ANS_PUBLIC_KEY::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.public_key_.Mutable( GetArena());
}
inline std::string* ANS_PUBLIC_KEY::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ANS_PUBLIC_KEY.public_key)
  return _impl_.public_key_.Release();
}
inline void ANS_PUBLIC_KEY::set_allocated_public_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ANS_PUBLIC_KEY.public_key)
}

// -------------------------------------------------------------------

// REQ_CONNECT

// string device_id = 1;
inline void REQ_CONNECT::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& REQ_CONNECT::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.REQ_CONNECT.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void REQ_CONNECT::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.REQ_CONNECT.device_id)
}
inline std::string* REQ_CONNECT::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.REQ_CONNECT.device_id)
  return _s;
}
inline const std::string& REQ_CONNECT::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void REQ_CONNECT::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* REQ_CONNECT::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* REQ_CONNECT::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.REQ_CONNECT.device_id)
  return _impl_.device_id_.Release();
}
inline void REQ_CONNECT::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.REQ_CONNECT.device_id)
}

// -------------------------------------------------------------------

// ANS_CONNECT

// bool is_success = 1;
inline void ANS_CONNECT::clear_is_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_success_ = false;
}
inline bool ANS_CONNECT::is_success() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ANS_CONNECT.is_success)
  return _internal_is_success();
}
inline void ANS_CONNECT::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:UserAndGameServer.ANS_CONNECT.is_success)
}
inline bool ANS_CONNECT::_internal_is_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_success_;
}
inline void ANS_CONNECT::_internal_set_is_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_success_ = value;
}

// string session_id = 2;
inline void ANS_CONNECT::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& ANS_CONNECT::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ANS_CONNECT.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ANS_CONNECT::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ANS_CONNECT.session_id)
}
inline std::string* ANS_CONNECT::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ANS_CONNECT.session_id)
  return _s;
}
inline const std::string& ANS_CONNECT::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void ANS_CONNECT::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* ANS_CONNECT::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* ANS_CONNECT::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ANS_CONNECT.session_id)
  return _impl_.session_id_.Release();
}
inline void ANS_CONNECT::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ANS_CONNECT.session_id)
}

// -------------------------------------------------------------------

// REQ_TEST_MSG

// string msg = 1;
inline void REQ_TEST_MSG::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& REQ_TEST_MSG::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.REQ_TEST_MSG.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void REQ_TEST_MSG::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.REQ_TEST_MSG.msg)
}
inline std::string* REQ_TEST_MSG::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.REQ_TEST_MSG.msg)
  return _s;
}
inline const std::string& REQ_TEST_MSG::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void REQ_TEST_MSG::_internal_set_msg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* REQ_TEST_MSG::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* REQ_TEST_MSG::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.REQ_TEST_MSG.msg)
  return _impl_.msg_.Release();
}
inline void REQ_TEST_MSG::set_allocated_msg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.REQ_TEST_MSG.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserAndGameServer


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::UserAndGameServer::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::UserAndGameServer::MsgType>() {
  return ::UserAndGameServer::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // UserAndGameServer_2eproto_2epb_2eh
