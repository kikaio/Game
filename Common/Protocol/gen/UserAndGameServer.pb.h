// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: UserAndGameServer.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef UserAndGameServer_2eproto_2epb_2eh
#define UserAndGameServer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_UserAndGameServer_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_UserAndGameServer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_UserAndGameServer_2eproto;
namespace UserAndGameServer {
class AnsConnect;
struct AnsConnectDefaultTypeInternal;
extern AnsConnectDefaultTypeInternal _AnsConnect_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AnsConnect_class_data_;
class AnsPublicKey;
struct AnsPublicKeyDefaultTypeInternal;
extern AnsPublicKeyDefaultTypeInternal _AnsPublicKey_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AnsPublicKey_class_data_;
class AnsTestMsg;
struct AnsTestMsgDefaultTypeInternal;
extern AnsTestMsgDefaultTypeInternal _AnsTestMsg_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AnsTestMsg_class_data_;
class ErrInfo;
struct ErrInfoDefaultTypeInternal;
extern ErrInfoDefaultTypeInternal _ErrInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ErrInfo_class_data_;
class ReqConnect;
struct ReqConnectDefaultTypeInternal;
extern ReqConnectDefaultTypeInternal _ReqConnect_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ReqConnect_class_data_;
class ReqPublicKey;
struct ReqPublicKeyDefaultTypeInternal;
extern ReqPublicKeyDefaultTypeInternal _ReqPublicKey_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ReqPublicKey_class_data_;
class ReqTestMsg;
struct ReqTestMsgDefaultTypeInternal;
extern ReqTestMsgDefaultTypeInternal _ReqTestMsg_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ReqTestMsg_class_data_;
}  // namespace UserAndGameServer
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace UserAndGameServer {
enum MsgType : int {
  Unexpected = 0,
  Req = 1,
  Ans = 2,
  Noti = 3,
  Err = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
constexpr MsgType MsgType_MIN = static_cast<MsgType>(0);
constexpr MsgType MsgType_MAX = static_cast<MsgType>(4);
constexpr int MsgType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return MsgType_Name(static_cast<MsgType>(value));
}
template <>
inline const std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ReqTestMsg final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ReqTestMsg) */ {
 public:
  inline ReqTestMsg() : ReqTestMsg(nullptr) {}
  ~ReqTestMsg() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqTestMsg* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqTestMsg));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqTestMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqTestMsg(const ReqTestMsg& from) : ReqTestMsg(nullptr, from) {}
  inline ReqTestMsg(ReqTestMsg&& from) noexcept
      : ReqTestMsg(nullptr, std::move(from)) {}
  inline ReqTestMsg& operator=(const ReqTestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestMsg& operator=(ReqTestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestMsg* internal_default_instance() {
    return reinterpret_cast<const ReqTestMsg*>(
        &_ReqTestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ReqTestMsg& a, ReqTestMsg& b) { a.Swap(&b); }
  inline void Swap(ReqTestMsg* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqTestMsg* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqTestMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqTestMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqTestMsg& from) { ReqTestMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqTestMsg* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ReqTestMsg"; }

 protected:
  explicit ReqTestMsg(::google::protobuf::Arena* arena);
  ReqTestMsg(::google::protobuf::Arena* arena, const ReqTestMsg& from);
  ReqTestMsg(::google::protobuf::Arena* arena, ReqTestMsg&& from) noexcept
      : ReqTestMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ReqTestMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqTestMsg& from_msg);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ReqTestMsg_class_data_;
// -------------------------------------------------------------------

class ReqPublicKey final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ReqPublicKey) */ {
 public:
  inline ReqPublicKey() : ReqPublicKey(nullptr) {}
  ~ReqPublicKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqPublicKey* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqPublicKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqPublicKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqPublicKey(const ReqPublicKey& from) : ReqPublicKey(nullptr, from) {}
  inline ReqPublicKey(ReqPublicKey&& from) noexcept
      : ReqPublicKey(nullptr, std::move(from)) {}
  inline ReqPublicKey& operator=(const ReqPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPublicKey& operator=(ReqPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqPublicKey* internal_default_instance() {
    return reinterpret_cast<const ReqPublicKey*>(
        &_ReqPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReqPublicKey& a, ReqPublicKey& b) { a.Swap(&b); }
  inline void Swap(ReqPublicKey* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqPublicKey* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqPublicKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqPublicKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqPublicKey& from) { ReqPublicKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqPublicKey* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ReqPublicKey"; }

 protected:
  explicit ReqPublicKey(::google::protobuf::Arena* arena);
  ReqPublicKey(::google::protobuf::Arena* arena, const ReqPublicKey& from);
  ReqPublicKey(::google::protobuf::Arena* arena, ReqPublicKey&& from) noexcept
      : ReqPublicKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ReqPublicKey)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqPublicKey& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ReqPublicKey_class_data_;
// -------------------------------------------------------------------

class ReqConnect final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ReqConnect) */ {
 public:
  inline ReqConnect() : ReqConnect(nullptr) {}
  ~ReqConnect() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqConnect* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqConnect));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqConnect(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqConnect(const ReqConnect& from) : ReqConnect(nullptr, from) {}
  inline ReqConnect(ReqConnect&& from) noexcept
      : ReqConnect(nullptr, std::move(from)) {}
  inline ReqConnect& operator=(const ReqConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqConnect& operator=(ReqConnect&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqConnect* internal_default_instance() {
    return reinterpret_cast<const ReqConnect*>(
        &_ReqConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ReqConnect& a, ReqConnect& b) { a.Swap(&b); }
  inline void Swap(ReqConnect* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqConnect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqConnect* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqConnect>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqConnect& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqConnect& from) { ReqConnect::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqConnect* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ReqConnect"; }

 protected:
  explicit ReqConnect(::google::protobuf::Arena* arena);
  ReqConnect(::google::protobuf::Arena* arena, const ReqConnect& from);
  ReqConnect(::google::protobuf::Arena* arena, ReqConnect&& from) noexcept
      : ReqConnect(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ReqConnect)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqConnect& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ReqConnect_class_data_;
// -------------------------------------------------------------------

class ErrInfo final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.ErrInfo) */ {
 public:
  inline ErrInfo() : ErrInfo(nullptr) {}
  ~ErrInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ErrInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ErrInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ErrInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ErrInfo(const ErrInfo& from) : ErrInfo(nullptr, from) {}
  inline ErrInfo(ErrInfo&& from) noexcept
      : ErrInfo(nullptr, std::move(from)) {}
  inline ErrInfo& operator=(const ErrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrInfo& operator=(ErrInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrInfo* internal_default_instance() {
    return reinterpret_cast<const ErrInfo*>(
        &_ErrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ErrInfo& a, ErrInfo& b) { a.Swap(&b); }
  inline void Swap(ErrInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ErrInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ErrInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ErrInfo& from) { ErrInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ErrInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.ErrInfo"; }

 protected:
  explicit ErrInfo(::google::protobuf::Arena* arena);
  ErrInfo(::google::protobuf::Arena* arena, const ErrInfo& from);
  ErrInfo(::google::protobuf::Arena* arena, ErrInfo&& from) noexcept
      : ErrInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrDescFieldNumber = 2,
    kErrNoFieldNumber = 1,
  };
  // string err_desc = 2;
  void clear_err_desc() ;
  const std::string& err_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err_desc(Arg_&& arg, Args_... args);
  std::string* mutable_err_desc();
  PROTOBUF_NODISCARD std::string* release_err_desc();
  void set_allocated_err_desc(std::string* value);

  private:
  const std::string& _internal_err_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_desc(
      const std::string& value);
  std::string* _internal_mutable_err_desc();

  public:
  // uint64 err_no = 1;
  void clear_err_no() ;
  ::uint64_t err_no() const;
  void set_err_no(::uint64_t value);

  private:
  ::uint64_t _internal_err_no() const;
  void _internal_set_err_no(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.ErrInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ErrInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr err_desc_;
    ::uint64_t err_no_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ErrInfo_class_data_;
// -------------------------------------------------------------------

class AnsTestMsg final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.AnsTestMsg) */ {
 public:
  inline AnsTestMsg() : AnsTestMsg(nullptr) {}
  ~AnsTestMsg() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnsTestMsg* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnsTestMsg));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnsTestMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnsTestMsg(const AnsTestMsg& from) : AnsTestMsg(nullptr, from) {}
  inline AnsTestMsg(AnsTestMsg&& from) noexcept
      : AnsTestMsg(nullptr, std::move(from)) {}
  inline AnsTestMsg& operator=(const AnsTestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsTestMsg& operator=(AnsTestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsTestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsTestMsg* internal_default_instance() {
    return reinterpret_cast<const AnsTestMsg*>(
        &_AnsTestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(AnsTestMsg& a, AnsTestMsg& b) { a.Swap(&b); }
  inline void Swap(AnsTestMsg* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsTestMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnsTestMsg* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnsTestMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnsTestMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnsTestMsg& from) { AnsTestMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnsTestMsg* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.AnsTestMsg"; }

 protected:
  explicit AnsTestMsg(::google::protobuf::Arena* arena);
  AnsTestMsg(::google::protobuf::Arena* arena, const AnsTestMsg& from);
  AnsTestMsg(::google::protobuf::Arena* arena, AnsTestMsg&& from) noexcept
      : AnsTestMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.AnsTestMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnsTestMsg& from_msg);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AnsTestMsg_class_data_;
// -------------------------------------------------------------------

class AnsPublicKey final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.AnsPublicKey) */ {
 public:
  inline AnsPublicKey() : AnsPublicKey(nullptr) {}
  ~AnsPublicKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnsPublicKey* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnsPublicKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnsPublicKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnsPublicKey(const AnsPublicKey& from) : AnsPublicKey(nullptr, from) {}
  inline AnsPublicKey(AnsPublicKey&& from) noexcept
      : AnsPublicKey(nullptr, std::move(from)) {}
  inline AnsPublicKey& operator=(const AnsPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsPublicKey& operator=(AnsPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsPublicKey* internal_default_instance() {
    return reinterpret_cast<const AnsPublicKey*>(
        &_AnsPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AnsPublicKey& a, AnsPublicKey& b) { a.Swap(&b); }
  inline void Swap(AnsPublicKey* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnsPublicKey* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnsPublicKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnsPublicKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnsPublicKey& from) { AnsPublicKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnsPublicKey* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.AnsPublicKey"; }

 protected:
  explicit AnsPublicKey(::google::protobuf::Arena* arena);
  AnsPublicKey(::google::protobuf::Arena* arena, const AnsPublicKey& from);
  AnsPublicKey(::google::protobuf::Arena* arena, AnsPublicKey&& from) noexcept
      : AnsPublicKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // string public_key = 1;
  void clear_public_key() ;
  const std::string& public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* value);

  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(
      const std::string& value);
  std::string* _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.AnsPublicKey)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnsPublicKey& from_msg);
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AnsPublicKey_class_data_;
// -------------------------------------------------------------------

class AnsConnect final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserAndGameServer.AnsConnect) */ {
 public:
  inline AnsConnect() : AnsConnect(nullptr) {}
  ~AnsConnect() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnsConnect* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnsConnect));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnsConnect(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnsConnect(const AnsConnect& from) : AnsConnect(nullptr, from) {}
  inline AnsConnect(AnsConnect&& from) noexcept
      : AnsConnect(nullptr, std::move(from)) {}
  inline AnsConnect& operator=(const AnsConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsConnect& operator=(AnsConnect&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsConnect* internal_default_instance() {
    return reinterpret_cast<const AnsConnect*>(
        &_AnsConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AnsConnect& a, AnsConnect& b) { a.Swap(&b); }
  inline void Swap(AnsConnect* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsConnect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnsConnect* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnsConnect>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnsConnect& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnsConnect& from) { AnsConnect::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnsConnect* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UserAndGameServer.AnsConnect"; }

 protected:
  explicit AnsConnect(::google::protobuf::Arena* arena);
  AnsConnect(::google::protobuf::Arena* arena, const AnsConnect& from);
  AnsConnect(::google::protobuf::Arena* arena, AnsConnect&& from) noexcept
      : AnsConnect(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 2,
    kIsSuccessFieldNumber = 1,
  };
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // bool is_success = 1;
  void clear_is_success() ;
  bool is_success() const;
  void set_is_success(bool value);

  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:UserAndGameServer.AnsConnect)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnsConnect& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    bool is_success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AnsConnect_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ErrInfo

// uint64 err_no = 1;
inline void ErrInfo::clear_err_no() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.err_no_ = ::uint64_t{0u};
}
inline ::uint64_t ErrInfo::err_no() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ErrInfo.err_no)
  return _internal_err_no();
}
inline void ErrInfo::set_err_no(::uint64_t value) {
  _internal_set_err_no(value);
  // @@protoc_insertion_point(field_set:UserAndGameServer.ErrInfo.err_no)
}
inline ::uint64_t ErrInfo::_internal_err_no() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.err_no_;
}
inline void ErrInfo::_internal_set_err_no(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.err_no_ = value;
}

// string err_desc = 2;
inline void ErrInfo::clear_err_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.err_desc_.ClearToEmpty();
}
inline const std::string& ErrInfo::err_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ErrInfo.err_desc)
  return _internal_err_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrInfo::set_err_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.err_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ErrInfo.err_desc)
}
inline std::string* ErrInfo::mutable_err_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_err_desc();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ErrInfo.err_desc)
  return _s;
}
inline const std::string& ErrInfo::_internal_err_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.err_desc_.Get();
}
inline void ErrInfo::_internal_set_err_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.err_desc_.Set(value, GetArena());
}
inline std::string* ErrInfo::_internal_mutable_err_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.err_desc_.Mutable( GetArena());
}
inline std::string* ErrInfo::release_err_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ErrInfo.err_desc)
  return _impl_.err_desc_.Release();
}
inline void ErrInfo::set_allocated_err_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.err_desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.err_desc_.IsDefault()) {
    _impl_.err_desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ErrInfo.err_desc)
}

// -------------------------------------------------------------------

// ReqPublicKey

// string device_id = 1;
inline void ReqPublicKey::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& ReqPublicKey::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ReqPublicKey.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqPublicKey::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ReqPublicKey.device_id)
}
inline std::string* ReqPublicKey::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ReqPublicKey.device_id)
  return _s;
}
inline const std::string& ReqPublicKey::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void ReqPublicKey::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* ReqPublicKey::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* ReqPublicKey::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ReqPublicKey.device_id)
  return _impl_.device_id_.Release();
}
inline void ReqPublicKey::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ReqPublicKey.device_id)
}

// -------------------------------------------------------------------

// AnsPublicKey

// string public_key = 1;
inline void AnsPublicKey::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& AnsPublicKey::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsPublicKey.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnsPublicKey::set_public_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsPublicKey.public_key)
}
inline std::string* AnsPublicKey::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.AnsPublicKey.public_key)
  return _s;
}
inline const std::string& AnsPublicKey::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void AnsPublicKey::_internal_set_public_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.Set(value, GetArena());
}
inline std::string* AnsPublicKey::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.public_key_.Mutable( GetArena());
}
inline std::string* AnsPublicKey::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.AnsPublicKey.public_key)
  return _impl_.public_key_.Release();
}
inline void AnsPublicKey::set_allocated_public_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.AnsPublicKey.public_key)
}

// -------------------------------------------------------------------

// ReqConnect

// string device_id = 1;
inline void ReqConnect::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& ReqConnect::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ReqConnect.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqConnect::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ReqConnect.device_id)
}
inline std::string* ReqConnect::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ReqConnect.device_id)
  return _s;
}
inline const std::string& ReqConnect::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void ReqConnect::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* ReqConnect::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* ReqConnect::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ReqConnect.device_id)
  return _impl_.device_id_.Release();
}
inline void ReqConnect::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ReqConnect.device_id)
}

// -------------------------------------------------------------------

// AnsConnect

// bool is_success = 1;
inline void AnsConnect::clear_is_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_success_ = false;
}
inline bool AnsConnect::is_success() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsConnect.is_success)
  return _internal_is_success();
}
inline void AnsConnect::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsConnect.is_success)
}
inline bool AnsConnect::_internal_is_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_success_;
}
inline void AnsConnect::_internal_set_is_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_success_ = value;
}

// string session_id = 2;
inline void AnsConnect::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& AnsConnect::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsConnect.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnsConnect::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsConnect.session_id)
}
inline std::string* AnsConnect::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.AnsConnect.session_id)
  return _s;
}
inline const std::string& AnsConnect::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void AnsConnect::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* AnsConnect::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* AnsConnect::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.AnsConnect.session_id)
  return _impl_.session_id_.Release();
}
inline void AnsConnect::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.AnsConnect.session_id)
}

// -------------------------------------------------------------------

// ReqTestMsg

// string msg = 1;
inline void ReqTestMsg::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& ReqTestMsg::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ReqTestMsg.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqTestMsg::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ReqTestMsg.msg)
}
inline std::string* ReqTestMsg::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ReqTestMsg.msg)
  return _s;
}
inline const std::string& ReqTestMsg::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void ReqTestMsg::_internal_set_msg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* ReqTestMsg::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* ReqTestMsg::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.ReqTestMsg.msg)
  return _impl_.msg_.Release();
}
inline void ReqTestMsg::set_allocated_msg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ReqTestMsg.msg)
}

// -------------------------------------------------------------------

// AnsTestMsg

// string msg = 1;
inline void AnsTestMsg::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& AnsTestMsg::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsTestMsg.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnsTestMsg::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsTestMsg.msg)
}
inline std::string* AnsTestMsg::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.AnsTestMsg.msg)
  return _s;
}
inline const std::string& AnsTestMsg::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void AnsTestMsg::_internal_set_msg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* AnsTestMsg::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* AnsTestMsg::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:UserAndGameServer.AnsTestMsg.msg)
  return _impl_.msg_.Release();
}
inline void AnsTestMsg::set_allocated_msg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.AnsTestMsg.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserAndGameServer


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::UserAndGameServer::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::UserAndGameServer::MsgType>() {
  return ::UserAndGameServer::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // UserAndGameServer_2eproto_2epb_2eh
