// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAndGameServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserAndGameServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserAndGameServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserAndGameServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserAndGameServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserAndGameServer_2eproto;
namespace UserAndGameServer {
class AnsConnect;
struct AnsConnectDefaultTypeInternal;
extern AnsConnectDefaultTypeInternal _AnsConnect_default_instance_;
class AnsPublicKey;
struct AnsPublicKeyDefaultTypeInternal;
extern AnsPublicKeyDefaultTypeInternal _AnsPublicKey_default_instance_;
class AnsTestMsg;
struct AnsTestMsgDefaultTypeInternal;
extern AnsTestMsgDefaultTypeInternal _AnsTestMsg_default_instance_;
class NotiErrInfo;
struct NotiErrInfoDefaultTypeInternal;
extern NotiErrInfoDefaultTypeInternal _NotiErrInfo_default_instance_;
class ReqConnect;
struct ReqConnectDefaultTypeInternal;
extern ReqConnectDefaultTypeInternal _ReqConnect_default_instance_;
class ReqPublicKey;
struct ReqPublicKeyDefaultTypeInternal;
extern ReqPublicKeyDefaultTypeInternal _ReqPublicKey_default_instance_;
class ReqTestMsg;
struct ReqTestMsgDefaultTypeInternal;
extern ReqTestMsgDefaultTypeInternal _ReqTestMsg_default_instance_;
}  // namespace UserAndGameServer
PROTOBUF_NAMESPACE_OPEN
template<> ::UserAndGameServer::AnsConnect* Arena::CreateMaybeMessage<::UserAndGameServer::AnsConnect>(Arena*);
template<> ::UserAndGameServer::AnsPublicKey* Arena::CreateMaybeMessage<::UserAndGameServer::AnsPublicKey>(Arena*);
template<> ::UserAndGameServer::AnsTestMsg* Arena::CreateMaybeMessage<::UserAndGameServer::AnsTestMsg>(Arena*);
template<> ::UserAndGameServer::NotiErrInfo* Arena::CreateMaybeMessage<::UserAndGameServer::NotiErrInfo>(Arena*);
template<> ::UserAndGameServer::ReqConnect* Arena::CreateMaybeMessage<::UserAndGameServer::ReqConnect>(Arena*);
template<> ::UserAndGameServer::ReqPublicKey* Arena::CreateMaybeMessage<::UserAndGameServer::ReqPublicKey>(Arena*);
template<> ::UserAndGameServer::ReqTestMsg* Arena::CreateMaybeMessage<::UserAndGameServer::ReqTestMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UserAndGameServer {

enum MsgType : int {
  INVALID_MSG_TYPE = 0,
  Req = 1,
  Ans = 2,
  Noti = 3,
  Err = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = INVALID_MSG_TYPE;
constexpr MsgType MsgType_MAX = Err;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum Protocol : int {
  INVALID_PROTOCOL = 0,
  ErrInfo = 1,
  PublicKey = 2,
  Connect = 3,
  TestMsg = 4,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = INVALID_PROTOCOL;
constexpr Protocol Protocol_MAX = TestMsg;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
// ===================================================================

class NotiErrInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.NotiErrInfo) */ {
 public:
  inline NotiErrInfo() : NotiErrInfo(nullptr) {}
  ~NotiErrInfo() override;
  explicit constexpr NotiErrInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotiErrInfo(const NotiErrInfo& from);
  NotiErrInfo(NotiErrInfo&& from) noexcept
    : NotiErrInfo() {
    *this = ::std::move(from);
  }

  inline NotiErrInfo& operator=(const NotiErrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotiErrInfo& operator=(NotiErrInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotiErrInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotiErrInfo* internal_default_instance() {
    return reinterpret_cast<const NotiErrInfo*>(
               &_NotiErrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotiErrInfo& a, NotiErrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NotiErrInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotiErrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotiErrInfo* New() const final {
    return new NotiErrInfo();
  }

  NotiErrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotiErrInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotiErrInfo& from);
  void MergeFrom(const NotiErrInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotiErrInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.NotiErrInfo";
  }
  protected:
  explicit NotiErrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrDescFieldNumber = 2,
    kErrNoFieldNumber = 1,
  };
  // string err_desc = 2;
  void clear_err_desc();
  const std::string& err_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_desc();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_err_desc();
  void set_allocated_err_desc(std::string* err_desc);
  private:
  const std::string& _internal_err_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_desc(const std::string& value);
  std::string* _internal_mutable_err_desc();
  public:

  // uint64 err_no = 1;
  void clear_err_no();
  ::PROTOBUF_NAMESPACE_ID::uint64 err_no() const;
  void set_err_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_err_no() const;
  void _internal_set_err_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.NotiErrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 err_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// -------------------------------------------------------------------

class ReqPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.ReqPublicKey) */ {
 public:
  inline ReqPublicKey() : ReqPublicKey(nullptr) {}
  ~ReqPublicKey() override;
  explicit constexpr ReqPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqPublicKey(const ReqPublicKey& from);
  ReqPublicKey(ReqPublicKey&& from) noexcept
    : ReqPublicKey() {
    *this = ::std::move(from);
  }

  inline ReqPublicKey& operator=(const ReqPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPublicKey& operator=(ReqPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqPublicKey* internal_default_instance() {
    return reinterpret_cast<const ReqPublicKey*>(
               &_ReqPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqPublicKey& a, ReqPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqPublicKey* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqPublicKey* New() const final {
    return new ReqPublicKey();
  }

  ReqPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqPublicKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqPublicKey& from);
  void MergeFrom(const ReqPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPublicKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.ReqPublicKey";
  }
  protected:
  explicit ReqPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.ReqPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// -------------------------------------------------------------------

class AnsPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.AnsPublicKey) */ {
 public:
  inline AnsPublicKey() : AnsPublicKey(nullptr) {}
  ~AnsPublicKey() override;
  explicit constexpr AnsPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsPublicKey(const AnsPublicKey& from);
  AnsPublicKey(AnsPublicKey&& from) noexcept
    : AnsPublicKey() {
    *this = ::std::move(from);
  }

  inline AnsPublicKey& operator=(const AnsPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsPublicKey& operator=(AnsPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsPublicKey* internal_default_instance() {
    return reinterpret_cast<const AnsPublicKey*>(
               &_AnsPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnsPublicKey& a, AnsPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsPublicKey* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsPublicKey* New() const final {
    return new AnsPublicKey();
  }

  AnsPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsPublicKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnsPublicKey& from);
  void MergeFrom(const AnsPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsPublicKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.AnsPublicKey";
  }
  protected:
  explicit AnsPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.AnsPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// -------------------------------------------------------------------

class ReqConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.ReqConnect) */ {
 public:
  inline ReqConnect() : ReqConnect(nullptr) {}
  ~ReqConnect() override;
  explicit constexpr ReqConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqConnect(const ReqConnect& from);
  ReqConnect(ReqConnect&& from) noexcept
    : ReqConnect() {
    *this = ::std::move(from);
  }

  inline ReqConnect& operator=(const ReqConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqConnect& operator=(ReqConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqConnect* internal_default_instance() {
    return reinterpret_cast<const ReqConnect*>(
               &_ReqConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqConnect& a, ReqConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqConnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqConnect* New() const final {
    return new ReqConnect();
  }

  ReqConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqConnect& from);
  void MergeFrom(const ReqConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.ReqConnect";
  }
  protected:
  explicit ReqConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.ReqConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// -------------------------------------------------------------------

class AnsConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.AnsConnect) */ {
 public:
  inline AnsConnect() : AnsConnect(nullptr) {}
  ~AnsConnect() override;
  explicit constexpr AnsConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsConnect(const AnsConnect& from);
  AnsConnect(AnsConnect&& from) noexcept
    : AnsConnect() {
    *this = ::std::move(from);
  }

  inline AnsConnect& operator=(const AnsConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsConnect& operator=(AnsConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsConnect* internal_default_instance() {
    return reinterpret_cast<const AnsConnect*>(
               &_AnsConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnsConnect& a, AnsConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsConnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsConnect* New() const final {
    return new AnsConnect();
  }

  AnsConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnsConnect& from);
  void MergeFrom(const AnsConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.AnsConnect";
  }
  protected:
  explicit AnsConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kIsSuccessFieldNumber = 1,
  };
  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bool is_success = 1;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.AnsConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  bool is_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// -------------------------------------------------------------------

class ReqTestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.ReqTestMsg) */ {
 public:
  inline ReqTestMsg() : ReqTestMsg(nullptr) {}
  ~ReqTestMsg() override;
  explicit constexpr ReqTestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTestMsg(const ReqTestMsg& from);
  ReqTestMsg(ReqTestMsg&& from) noexcept
    : ReqTestMsg() {
    *this = ::std::move(from);
  }

  inline ReqTestMsg& operator=(const ReqTestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestMsg& operator=(ReqTestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestMsg* internal_default_instance() {
    return reinterpret_cast<const ReqTestMsg*>(
               &_ReqTestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqTestMsg& a, ReqTestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTestMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTestMsg* New() const final {
    return new ReqTestMsg();
  }

  ReqTestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTestMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTestMsg& from);
  void MergeFrom(const ReqTestMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTestMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.ReqTestMsg";
  }
  protected:
  explicit ReqTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.ReqTestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// -------------------------------------------------------------------

class AnsTestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserAndGameServer.AnsTestMsg) */ {
 public:
  inline AnsTestMsg() : AnsTestMsg(nullptr) {}
  ~AnsTestMsg() override;
  explicit constexpr AnsTestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsTestMsg(const AnsTestMsg& from);
  AnsTestMsg(AnsTestMsg&& from) noexcept
    : AnsTestMsg() {
    *this = ::std::move(from);
  }

  inline AnsTestMsg& operator=(const AnsTestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsTestMsg& operator=(AnsTestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsTestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsTestMsg* internal_default_instance() {
    return reinterpret_cast<const AnsTestMsg*>(
               &_AnsTestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnsTestMsg& a, AnsTestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsTestMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsTestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsTestMsg* New() const final {
    return new AnsTestMsg();
  }

  AnsTestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsTestMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnsTestMsg& from);
  void MergeFrom(const AnsTestMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsTestMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserAndGameServer.AnsTestMsg";
  }
  protected:
  explicit AnsTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:UserAndGameServer.AnsTestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserAndGameServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotiErrInfo

// uint64 err_no = 1;
inline void NotiErrInfo::clear_err_no() {
  err_no_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotiErrInfo::_internal_err_no() const {
  return err_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotiErrInfo::err_no() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.NotiErrInfo.err_no)
  return _internal_err_no();
}
inline void NotiErrInfo::_internal_set_err_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  err_no_ = value;
}
inline void NotiErrInfo::set_err_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_err_no(value);
  // @@protoc_insertion_point(field_set:UserAndGameServer.NotiErrInfo.err_no)
}

// string err_desc = 2;
inline void NotiErrInfo::clear_err_desc() {
  err_desc_.ClearToEmpty();
}
inline const std::string& NotiErrInfo::err_desc() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.NotiErrInfo.err_desc)
  return _internal_err_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotiErrInfo::set_err_desc(ArgT0&& arg0, ArgT... args) {
 
 err_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.NotiErrInfo.err_desc)
}
inline std::string* NotiErrInfo::mutable_err_desc() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.NotiErrInfo.err_desc)
  return _internal_mutable_err_desc();
}
inline const std::string& NotiErrInfo::_internal_err_desc() const {
  return err_desc_.Get();
}
inline void NotiErrInfo::_internal_set_err_desc(const std::string& value) {
  
  err_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NotiErrInfo::_internal_mutable_err_desc() {
  
  return err_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NotiErrInfo::release_err_desc() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.NotiErrInfo.err_desc)
  return err_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NotiErrInfo::set_allocated_err_desc(std::string* err_desc) {
  if (err_desc != nullptr) {
    
  } else {
    
  }
  err_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.NotiErrInfo.err_desc)
}

// -------------------------------------------------------------------

// ReqPublicKey

// string device_id = 1;
inline void ReqPublicKey::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& ReqPublicKey::device_id() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ReqPublicKey.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqPublicKey::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ReqPublicKey.device_id)
}
inline std::string* ReqPublicKey::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ReqPublicKey.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& ReqPublicKey::_internal_device_id() const {
  return device_id_.Get();
}
inline void ReqPublicKey::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqPublicKey::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqPublicKey::release_device_id() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.ReqPublicKey.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqPublicKey::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ReqPublicKey.device_id)
}

// -------------------------------------------------------------------

// AnsPublicKey

// string public_key = 1;
inline void AnsPublicKey::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& AnsPublicKey::public_key() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsPublicKey.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsPublicKey::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsPublicKey.public_key)
}
inline std::string* AnsPublicKey::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.AnsPublicKey.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& AnsPublicKey::_internal_public_key() const {
  return public_key_.Get();
}
inline void AnsPublicKey::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsPublicKey::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsPublicKey::release_public_key() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.AnsPublicKey.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsPublicKey::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.AnsPublicKey.public_key)
}

// -------------------------------------------------------------------

// ReqConnect

// string device_id = 1;
inline void ReqConnect::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& ReqConnect::device_id() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ReqConnect.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqConnect::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ReqConnect.device_id)
}
inline std::string* ReqConnect::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ReqConnect.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& ReqConnect::_internal_device_id() const {
  return device_id_.Get();
}
inline void ReqConnect::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqConnect::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqConnect::release_device_id() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.ReqConnect.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqConnect::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ReqConnect.device_id)
}

// -------------------------------------------------------------------

// AnsConnect

// bool is_success = 1;
inline void AnsConnect::clear_is_success() {
  is_success_ = false;
}
inline bool AnsConnect::_internal_is_success() const {
  return is_success_;
}
inline bool AnsConnect::is_success() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsConnect.is_success)
  return _internal_is_success();
}
inline void AnsConnect::_internal_set_is_success(bool value) {
  
  is_success_ = value;
}
inline void AnsConnect::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsConnect.is_success)
}

// string session_id = 2;
inline void AnsConnect::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AnsConnect::session_id() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsConnect.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsConnect::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsConnect.session_id)
}
inline std::string* AnsConnect::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.AnsConnect.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& AnsConnect::_internal_session_id() const {
  return session_id_.Get();
}
inline void AnsConnect::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsConnect::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsConnect::release_session_id() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.AnsConnect.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsConnect::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.AnsConnect.session_id)
}

// -------------------------------------------------------------------

// ReqTestMsg

// string msg = 1;
inline void ReqTestMsg::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ReqTestMsg::msg() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.ReqTestMsg.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestMsg::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.ReqTestMsg.msg)
}
inline std::string* ReqTestMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.ReqTestMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqTestMsg::_internal_msg() const {
  return msg_.Get();
}
inline void ReqTestMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestMsg::release_msg() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.ReqTestMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.ReqTestMsg.msg)
}

// -------------------------------------------------------------------

// AnsTestMsg

// string msg = 1;
inline void AnsTestMsg::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& AnsTestMsg::msg() const {
  // @@protoc_insertion_point(field_get:UserAndGameServer.AnsTestMsg.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsTestMsg::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserAndGameServer.AnsTestMsg.msg)
}
inline std::string* AnsTestMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:UserAndGameServer.AnsTestMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& AnsTestMsg::_internal_msg() const {
  return msg_.Get();
}
inline void AnsTestMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsTestMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsTestMsg::release_msg() {
  // @@protoc_insertion_point(field_release:UserAndGameServer.AnsTestMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsTestMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserAndGameServer.AnsTestMsg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UserAndGameServer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UserAndGameServer::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserAndGameServer::MsgType>() {
  return ::UserAndGameServer::MsgType_descriptor();
}
template <> struct is_proto_enum< ::UserAndGameServer::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserAndGameServer::Protocol>() {
  return ::UserAndGameServer::Protocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserAndGameServer_2eproto
