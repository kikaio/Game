// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MasterAndChatServer.proto

#include "MasterAndChatServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace MasterAndChatServer {
constexpr NotiErrInfo::NotiErrInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_no_(0)
  , err_detail_(0){}
struct NotiErrInfoDefaultTypeInternal {
  constexpr NotiErrInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotiErrInfoDefaultTypeInternal() {}
  union {
    NotiErrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotiErrInfoDefaultTypeInternal _NotiErrInfo_default_instance_;
constexpr ReqChatConnectMaster::ReqChatConnectMaster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_no_(0){}
struct ReqChatConnectMasterDefaultTypeInternal {
  constexpr ReqChatConnectMasterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqChatConnectMasterDefaultTypeInternal() {}
  union {
    ReqChatConnectMaster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqChatConnectMasterDefaultTypeInternal _ReqChatConnectMaster_default_instance_;
constexpr AnsChatConnectMaster::AnsChatConnectMaster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_success_(false){}
struct AnsChatConnectMasterDefaultTypeInternal {
  constexpr AnsChatConnectMasterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsChatConnectMasterDefaultTypeInternal() {}
  union {
    AnsChatConnectMaster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsChatConnectMasterDefaultTypeInternal _AnsChatConnectMaster_default_instance_;
}  // namespace MasterAndChatServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MasterAndChatServer_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MasterAndChatServer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MasterAndChatServer_2eproto = nullptr;

const uint32_t TableStruct_MasterAndChatServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::NotiErrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::NotiErrInfo, err_no_),
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::NotiErrInfo, err_detail_),
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::NotiErrInfo, err_desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::ReqChatConnectMaster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::ReqChatConnectMaster, server_no_),
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::ReqChatConnectMaster, server_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::AnsChatConnectMaster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MasterAndChatServer::AnsChatConnectMaster, is_success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MasterAndChatServer::NotiErrInfo)},
  { 9, -1, -1, sizeof(::MasterAndChatServer::ReqChatConnectMaster)},
  { 17, -1, -1, sizeof(::MasterAndChatServer::AnsChatConnectMaster)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MasterAndChatServer::_NotiErrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MasterAndChatServer::_ReqChatConnectMaster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MasterAndChatServer::_AnsChatConnectMaster_default_instance_),
};

const char descriptor_table_protodef_MasterAndChatServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031MasterAndChatServer.proto\022\023MasterAndCh"
  "atServer\"C\n\013NotiErrInfo\022\016\n\006err_no\030\001 \001(\005\022"
  "\022\n\nerr_detail\030\002 \001(\005\022\020\n\010err_desc\030\003 \001(\t\">\n"
  "\024ReqChatConnectMaster\022\021\n\tserver_no\030\001 \001(\005"
  "\022\023\n\013server_name\030\002 \001(\t\"*\n\024AnsChatConnectM"
  "aster\022\022\n\nis_success\030\001 \001(\010*D\n\007MsgType\022\024\n\020"
  "INVALID_MSG_TYPE\020\000\022\007\n\003Req\020\001\022\007\n\003Ans\020\002\022\010\n\004"
  "Noti\020\003\022\007\n\003Err\020\004*D\n\010Protocol\022\024\n\020INVALID_P"
  "ROTOCOL\020\000\022\013\n\007ErrInfo\020\001\022\025\n\021ChatConnectMas"
  "ter\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MasterAndChatServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MasterAndChatServer_2eproto = {
  false, false, 373, descriptor_table_protodef_MasterAndChatServer_2eproto, "MasterAndChatServer.proto", 
  &descriptor_table_MasterAndChatServer_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_MasterAndChatServer_2eproto::offsets,
  file_level_metadata_MasterAndChatServer_2eproto, file_level_enum_descriptors_MasterAndChatServer_2eproto, file_level_service_descriptors_MasterAndChatServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MasterAndChatServer_2eproto_getter() {
  return &descriptor_table_MasterAndChatServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MasterAndChatServer_2eproto(&descriptor_table_MasterAndChatServer_2eproto);
namespace MasterAndChatServer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MasterAndChatServer_2eproto);
  return file_level_enum_descriptors_MasterAndChatServer_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MasterAndChatServer_2eproto);
  return file_level_enum_descriptors_MasterAndChatServer_2eproto[1];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NotiErrInfo::_Internal {
 public:
};

NotiErrInfo::NotiErrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MasterAndChatServer.NotiErrInfo)
}
NotiErrInfo::NotiErrInfo(const NotiErrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_desc().empty()) {
    err_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&err_no_, &from.err_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_detail_) -
    reinterpret_cast<char*>(&err_no_)) + sizeof(err_detail_));
  // @@protoc_insertion_point(copy_constructor:MasterAndChatServer.NotiErrInfo)
}

inline void NotiErrInfo::SharedCtor() {
err_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_detail_) -
    reinterpret_cast<char*>(&err_no_)) + sizeof(err_detail_));
}

NotiErrInfo::~NotiErrInfo() {
  // @@protoc_insertion_point(destructor:MasterAndChatServer.NotiErrInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotiErrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotiErrInfo::ArenaDtor(void* object) {
  NotiErrInfo* _this = reinterpret_cast< NotiErrInfo* >(object);
  (void)_this;
}
void NotiErrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotiErrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotiErrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterAndChatServer.NotiErrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_desc_.ClearToEmpty();
  ::memset(&err_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_detail_) -
      reinterpret_cast<char*>(&err_no_)) + sizeof(err_detail_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotiErrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MasterAndChatServer.NotiErrInfo.err_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotiErrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MasterAndChatServer.NotiErrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_no = 1;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_no(), target);
  }

  // int32 err_detail = 2;
  if (this->_internal_err_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_detail(), target);
  }

  // string err_desc = 3;
  if (!this->_internal_err_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_desc().data(), static_cast<int>(this->_internal_err_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MasterAndChatServer.NotiErrInfo.err_desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterAndChatServer.NotiErrInfo)
  return target;
}

size_t NotiErrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterAndChatServer.NotiErrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_desc = 3;
  if (!this->_internal_err_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_desc());
  }

  // int32 err_no = 1;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  // int32 err_detail = 2;
  if (this->_internal_err_detail() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_detail());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotiErrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotiErrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotiErrInfo::GetClassData() const { return &_class_data_; }

void NotiErrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotiErrInfo *>(to)->MergeFrom(
      static_cast<const NotiErrInfo &>(from));
}


void NotiErrInfo::MergeFrom(const NotiErrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterAndChatServer.NotiErrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_desc().empty()) {
    _internal_set_err_desc(from._internal_err_desc());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  if (from._internal_err_detail() != 0) {
    _internal_set_err_detail(from._internal_err_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotiErrInfo::CopyFrom(const NotiErrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterAndChatServer.NotiErrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiErrInfo::IsInitialized() const {
  return true;
}

void NotiErrInfo::InternalSwap(NotiErrInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_desc_, lhs_arena,
      &other->err_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotiErrInfo, err_detail_)
      + sizeof(NotiErrInfo::err_detail_)
      - PROTOBUF_FIELD_OFFSET(NotiErrInfo, err_no_)>(
          reinterpret_cast<char*>(&err_no_),
          reinterpret_cast<char*>(&other->err_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotiErrInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MasterAndChatServer_2eproto_getter, &descriptor_table_MasterAndChatServer_2eproto_once,
      file_level_metadata_MasterAndChatServer_2eproto[0]);
}

// ===================================================================

class ReqChatConnectMaster::_Internal {
 public:
};

ReqChatConnectMaster::ReqChatConnectMaster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MasterAndChatServer.ReqChatConnectMaster)
}
ReqChatConnectMaster::ReqChatConnectMaster(const ReqChatConnectMaster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_name().empty()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArenaForAllocation());
  }
  server_no_ = from.server_no_;
  // @@protoc_insertion_point(copy_constructor:MasterAndChatServer.ReqChatConnectMaster)
}

inline void ReqChatConnectMaster::SharedCtor() {
server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_no_ = 0;
}

ReqChatConnectMaster::~ReqChatConnectMaster() {
  // @@protoc_insertion_point(destructor:MasterAndChatServer.ReqChatConnectMaster)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqChatConnectMaster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqChatConnectMaster::ArenaDtor(void* object) {
  ReqChatConnectMaster* _this = reinterpret_cast< ReqChatConnectMaster* >(object);
  (void)_this;
}
void ReqChatConnectMaster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqChatConnectMaster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChatConnectMaster::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterAndChatServer.ReqChatConnectMaster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmpty();
  server_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChatConnectMaster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          server_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MasterAndChatServer.ReqChatConnectMaster.server_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqChatConnectMaster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MasterAndChatServer.ReqChatConnectMaster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_no = 1;
  if (this->_internal_server_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_no(), target);
  }

  // string server_name = 2;
  if (!this->_internal_server_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MasterAndChatServer.ReqChatConnectMaster.server_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterAndChatServer.ReqChatConnectMaster)
  return target;
}

size_t ReqChatConnectMaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterAndChatServer.ReqChatConnectMaster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 2;
  if (!this->_internal_server_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_name());
  }

  // int32 server_no = 1;
  if (this->_internal_server_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_server_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqChatConnectMaster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqChatConnectMaster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqChatConnectMaster::GetClassData() const { return &_class_data_; }

void ReqChatConnectMaster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqChatConnectMaster *>(to)->MergeFrom(
      static_cast<const ReqChatConnectMaster &>(from));
}


void ReqChatConnectMaster::MergeFrom(const ReqChatConnectMaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterAndChatServer.ReqChatConnectMaster)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_name().empty()) {
    _internal_set_server_name(from._internal_server_name());
  }
  if (from._internal_server_no() != 0) {
    _internal_set_server_no(from._internal_server_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqChatConnectMaster::CopyFrom(const ReqChatConnectMaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterAndChatServer.ReqChatConnectMaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChatConnectMaster::IsInitialized() const {
  return true;
}

void ReqChatConnectMaster::InternalSwap(ReqChatConnectMaster* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_name_, lhs_arena,
      &other->server_name_, rhs_arena
  );
  swap(server_no_, other->server_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChatConnectMaster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MasterAndChatServer_2eproto_getter, &descriptor_table_MasterAndChatServer_2eproto_once,
      file_level_metadata_MasterAndChatServer_2eproto[1]);
}

// ===================================================================

class AnsChatConnectMaster::_Internal {
 public:
};

AnsChatConnectMaster::AnsChatConnectMaster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MasterAndChatServer.AnsChatConnectMaster)
}
AnsChatConnectMaster::AnsChatConnectMaster(const AnsChatConnectMaster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:MasterAndChatServer.AnsChatConnectMaster)
}

inline void AnsChatConnectMaster::SharedCtor() {
is_success_ = false;
}

AnsChatConnectMaster::~AnsChatConnectMaster() {
  // @@protoc_insertion_point(destructor:MasterAndChatServer.AnsChatConnectMaster)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsChatConnectMaster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnsChatConnectMaster::ArenaDtor(void* object) {
  AnsChatConnectMaster* _this = reinterpret_cast< AnsChatConnectMaster* >(object);
  (void)_this;
}
void AnsChatConnectMaster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsChatConnectMaster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsChatConnectMaster::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterAndChatServer.AnsChatConnectMaster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsChatConnectMaster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsChatConnectMaster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MasterAndChatServer.AnsChatConnectMaster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterAndChatServer.AnsChatConnectMaster)
  return target;
}

size_t AnsChatConnectMaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterAndChatServer.AnsChatConnectMaster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsChatConnectMaster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsChatConnectMaster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsChatConnectMaster::GetClassData() const { return &_class_data_; }

void AnsChatConnectMaster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsChatConnectMaster *>(to)->MergeFrom(
      static_cast<const AnsChatConnectMaster &>(from));
}


void AnsChatConnectMaster::MergeFrom(const AnsChatConnectMaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterAndChatServer.AnsChatConnectMaster)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsChatConnectMaster::CopyFrom(const AnsChatConnectMaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterAndChatServer.AnsChatConnectMaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsChatConnectMaster::IsInitialized() const {
  return true;
}

void AnsChatConnectMaster::InternalSwap(AnsChatConnectMaster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_success_, other->is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsChatConnectMaster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MasterAndChatServer_2eproto_getter, &descriptor_table_MasterAndChatServer_2eproto_once,
      file_level_metadata_MasterAndChatServer_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MasterAndChatServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MasterAndChatServer::NotiErrInfo* Arena::CreateMaybeMessage< ::MasterAndChatServer::NotiErrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MasterAndChatServer::NotiErrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MasterAndChatServer::ReqChatConnectMaster* Arena::CreateMaybeMessage< ::MasterAndChatServer::ReqChatConnectMaster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MasterAndChatServer::ReqChatConnectMaster >(arena);
}
template<> PROTOBUF_NOINLINE ::MasterAndChatServer::AnsChatConnectMaster* Arena::CreateMaybeMessage< ::MasterAndChatServer::AnsChatConnectMaster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MasterAndChatServer::AnsChatConnectMaster >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
