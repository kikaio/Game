// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAndChatServer.proto

#include "UserAndChatServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace UserAndChatServer {
constexpr ChatProfile::ChatProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , profile_id_(int64_t{0})
  , profile_hero_id_(int64_t{0})
  , profile_frame_id_(int64_t{0}){}
struct ChatProfileDefaultTypeInternal {
  constexpr ChatProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProfileDefaultTypeInternal() {}
  union {
    ChatProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProfileDefaultTypeInternal _ChatProfile_default_instance_;
constexpr ChatData::ChatData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_profile_(nullptr)
  , chat_type_(0){}
struct ChatDataDefaultTypeInternal {
  constexpr ChatDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatDataDefaultTypeInternal() {}
  union {
    ChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatDataDefaultTypeInternal _ChatData_default_instance_;
constexpr ReqChatConn::ReqChatConn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(int64_t{0}){}
struct ReqChatConnDefaultTypeInternal {
  constexpr ReqChatConnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqChatConnDefaultTypeInternal() {}
  union {
    ReqChatConn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqChatConnDefaultTypeInternal _ReqChatConn_default_instance_;
constexpr AnsChatConn::AnsChatConn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profiles_()
  , profile_(nullptr)
  , room_no_(0){}
struct AnsChatConnDefaultTypeInternal {
  constexpr AnsChatConnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsChatConnDefaultTypeInternal() {}
  union {
    AnsChatConn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsChatConnDefaultTypeInternal _AnsChatConn_default_instance_;
constexpr ReqChat::ReqChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_data_(nullptr){}
struct ReqChatDefaultTypeInternal {
  constexpr ReqChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqChatDefaultTypeInternal() {}
  union {
    ReqChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqChatDefaultTypeInternal _ReqChat_default_instance_;
constexpr NotiChat::NotiChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_data_(nullptr)
  , chat_room_type_(0)
{}
struct NotiChatDefaultTypeInternal {
  constexpr NotiChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotiChatDefaultTypeInternal() {}
  union {
    NotiChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotiChatDefaultTypeInternal _NotiChat_default_instance_;
constexpr ReqEnterChatRoom::ReqEnterChatRoom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_room_no_(0){}
struct ReqEnterChatRoomDefaultTypeInternal {
  constexpr ReqEnterChatRoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqEnterChatRoomDefaultTypeInternal() {}
  union {
    ReqEnterChatRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqEnterChatRoomDefaultTypeInternal _ReqEnterChatRoom_default_instance_;
constexpr NotiEnterChatRoom::NotiEnterChatRoom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enter_profile_(nullptr){}
struct NotiEnterChatRoomDefaultTypeInternal {
  constexpr NotiEnterChatRoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotiEnterChatRoomDefaultTypeInternal() {}
  union {
    NotiEnterChatRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotiEnterChatRoomDefaultTypeInternal _NotiEnterChatRoom_default_instance_;
constexpr NotiLeaveChatRoom::NotiLeaveChatRoom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accoun_id_(int64_t{0}){}
struct NotiLeaveChatRoomDefaultTypeInternal {
  constexpr NotiLeaveChatRoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotiLeaveChatRoomDefaultTypeInternal() {}
  union {
    NotiLeaveChatRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotiLeaveChatRoomDefaultTypeInternal _NotiLeaveChatRoom_default_instance_;
}  // namespace UserAndChatServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UserAndChatServer_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_UserAndChatServer_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UserAndChatServer_2eproto = nullptr;

const uint32_t TableStruct_UserAndChatServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatProfile, profile_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatProfile, nick_name_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatProfile, profile_hero_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatProfile, profile_frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatData, chat_profile_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatData, chat_type_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ChatData, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ReqChatConn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ReqChatConn, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::AnsChatConn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::AnsChatConn, profile_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::AnsChatConn, room_no_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::AnsChatConn, profiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ReqChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ReqChat, chat_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiChat, chat_room_type_),
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiChat, chat_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ReqEnterChatRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::ReqEnterChatRoom, chat_room_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiEnterChatRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiEnterChatRoom, enter_profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiLeaveChatRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndChatServer::NotiLeaveChatRoom, accoun_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::UserAndChatServer::ChatProfile)},
  { 10, -1, -1, sizeof(::UserAndChatServer::ChatData)},
  { 19, -1, -1, sizeof(::UserAndChatServer::ReqChatConn)},
  { 26, -1, -1, sizeof(::UserAndChatServer::AnsChatConn)},
  { 35, -1, -1, sizeof(::UserAndChatServer::ReqChat)},
  { 42, -1, -1, sizeof(::UserAndChatServer::NotiChat)},
  { 50, -1, -1, sizeof(::UserAndChatServer::ReqEnterChatRoom)},
  { 57, -1, -1, sizeof(::UserAndChatServer::NotiEnterChatRoom)},
  { 64, -1, -1, sizeof(::UserAndChatServer::NotiLeaveChatRoom)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_ChatProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_ChatData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_ReqChatConn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_AnsChatConn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_ReqChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_NotiChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_ReqEnterChatRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_NotiEnterChatRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndChatServer::_NotiLeaveChatRoom_default_instance_),
};

const char descriptor_table_protodef_UserAndChatServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027UserAndChatServer.proto\022\021UserAndChatSe"
  "rver\"g\n\013ChatProfile\022\022\n\nprofile_id\030\001 \001(\003\022"
  "\021\n\tnick_name\030\002 \001(\t\022\027\n\017profile_hero_id\030\003 "
  "\001(\003\022\030\n\020profile_frame_id\030\004 \001(\003\"`\n\010ChatDat"
  "a\0224\n\014chat_profile\030\001 \001(\0132\036.UserAndChatSer"
  "ver.ChatProfile\022\021\n\tchat_type\030\002 \001(\005\022\013\n\003ms"
  "g\030\003 \001(\t\"!\n\013ReqChatConn\022\022\n\naccount_id\030\001 \001"
  "(\003\"\201\001\n\013AnsChatConn\022/\n\007profile\030\001 \001(\0132\036.Us"
  "erAndChatServer.ChatProfile\022\017\n\007room_no\030\002"
  " \001(\005\0220\n\010profiles\030\003 \003(\0132\036.UserAndChatServ"
  "er.ChatProfile\"9\n\007ReqChat\022.\n\tchat_data\030\001"
  " \001(\0132\033.UserAndChatServer.ChatData\"s\n\010Not"
  "iChat\0227\n\016chat_room_type\030\001 \001(\0162\037.UserAndC"
  "hatServer.ChatRoomType\022.\n\tchat_data\030\002 \001("
  "\0132\033.UserAndChatServer.ChatData\"(\n\020ReqEnt"
  "erChatRoom\022\024\n\014chat_room_no\030\001 \001(\005\"J\n\021Noti"
  "EnterChatRoom\0225\n\renter_profile\030\001 \001(\0132\036.U"
  "serAndChatServer.ChatProfile\"&\n\021NotiLeav"
  "eChatRoom\022\021\n\taccoun_id\030\001 \001(\003*D\n\007MsgType\022"
  "\024\n\020INVALID_MSG_TYPE\020\000\022\007\n\003Req\020\001\022\007\n\003Ans\020\002\022"
  "\010\n\004Noti\020\003\022\007\n\003Err\020\004*^\n\010Protocol\022\024\n\020INVALI"
  "D_PROTOCOL\020\000\022\014\n\010ChatConn\020\001\022\010\n\004Chat\020\002\022\021\n\r"
  "EnterChatRoom\020\003\022\021\n\rLeaveChatRoom\020\004*\037\n\014Ch"
  "atRoomType\022\017\n\013NORMAL_ROOM\020\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UserAndChatServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserAndChatServer_2eproto = {
  false, false, 955, descriptor_table_protodef_UserAndChatServer_2eproto, "UserAndChatServer.proto", 
  &descriptor_table_UserAndChatServer_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_UserAndChatServer_2eproto::offsets,
  file_level_metadata_UserAndChatServer_2eproto, file_level_enum_descriptors_UserAndChatServer_2eproto, file_level_service_descriptors_UserAndChatServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_UserAndChatServer_2eproto_getter() {
  return &descriptor_table_UserAndChatServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UserAndChatServer_2eproto(&descriptor_table_UserAndChatServer_2eproto);
namespace UserAndChatServer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserAndChatServer_2eproto);
  return file_level_enum_descriptors_UserAndChatServer_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserAndChatServer_2eproto);
  return file_level_enum_descriptors_UserAndChatServer_2eproto[1];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatRoomType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserAndChatServer_2eproto);
  return file_level_enum_descriptors_UserAndChatServer_2eproto[2];
}
bool ChatRoomType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChatProfile::_Internal {
 public:
};

ChatProfile::ChatProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.ChatProfile)
}
ChatProfile::ChatProfile(const ChatProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nick_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&profile_id_, &from.profile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_frame_id_) -
    reinterpret_cast<char*>(&profile_id_)) + sizeof(profile_frame_id_));
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.ChatProfile)
}

inline void ChatProfile::SharedCtor() {
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nick_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profile_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&profile_frame_id_) -
    reinterpret_cast<char*>(&profile_id_)) + sizeof(profile_frame_id_));
}

ChatProfile::~ChatProfile() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.ChatProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProfile::ArenaDtor(void* object) {
  ChatProfile* _this = reinterpret_cast< ChatProfile* >(object);
  (void)_this;
}
void ChatProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.ChatProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  ::memset(&profile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_frame_id_) -
      reinterpret_cast<char*>(&profile_id_)) + sizeof(profile_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 profile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          profile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndChatServer.ChatProfile.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 profile_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          profile_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 profile_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          profile_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.ChatProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 profile_id = 1;
  if (this->_internal_profile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_profile_id(), target);
  }

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndChatServer.ChatProfile.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // int64 profile_hero_id = 3;
  if (this->_internal_profile_hero_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_profile_hero_id(), target);
  }

  // int64 profile_frame_id = 4;
  if (this->_internal_profile_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_profile_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.ChatProfile)
  return target;
}

size_t ChatProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.ChatProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // int64 profile_id = 1;
  if (this->_internal_profile_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_profile_id());
  }

  // int64 profile_hero_id = 3;
  if (this->_internal_profile_hero_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_profile_hero_id());
  }

  // int64 profile_frame_id = 4;
  if (this->_internal_profile_frame_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_profile_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatProfile::GetClassData() const { return &_class_data_; }

void ChatProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatProfile *>(to)->MergeFrom(
      static_cast<const ChatProfile &>(from));
}


void ChatProfile::MergeFrom(const ChatProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.ChatProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from._internal_profile_id() != 0) {
    _internal_set_profile_id(from._internal_profile_id());
  }
  if (from._internal_profile_hero_id() != 0) {
    _internal_set_profile_hero_id(from._internal_profile_hero_id());
  }
  if (from._internal_profile_frame_id() != 0) {
    _internal_set_profile_frame_id(from._internal_profile_frame_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatProfile::CopyFrom(const ChatProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.ChatProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProfile::IsInitialized() const {
  return true;
}

void ChatProfile::InternalSwap(ChatProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatProfile, profile_frame_id_)
      + sizeof(ChatProfile::profile_frame_id_)
      - PROTOBUF_FIELD_OFFSET(ChatProfile, profile_id_)>(
          reinterpret_cast<char*>(&profile_id_),
          reinterpret_cast<char*>(&other->profile_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[0]);
}

// ===================================================================

class ChatData::_Internal {
 public:
  static const ::UserAndChatServer::ChatProfile& chat_profile(const ChatData* msg);
};

const ::UserAndChatServer::ChatProfile&
ChatData::_Internal::chat_profile(const ChatData* msg) {
  return *msg->chat_profile_;
}
ChatData::ChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.ChatData)
}
ChatData::ChatData(const ChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chat_profile()) {
    chat_profile_ = new ::UserAndChatServer::ChatProfile(*from.chat_profile_);
  } else {
    chat_profile_ = nullptr;
  }
  chat_type_ = from.chat_type_;
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.ChatData)
}

inline void ChatData::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_profile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_profile_)) + sizeof(chat_type_));
}

ChatData::~ChatData() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.ChatData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_profile_;
}

void ChatData::ArenaDtor(void* object) {
  ChatData* _this = reinterpret_cast< ChatData* >(object);
  (void)_this;
}
void ChatData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.ChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && chat_profile_ != nullptr) {
    delete chat_profile_;
  }
  chat_profile_ = nullptr;
  chat_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndChatServer.ChatProfile chat_profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 chat_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          chat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndChatServer.ChatData.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.ChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndChatServer.ChatProfile chat_profile = 1;
  if (this->_internal_has_chat_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat_profile(this), target, stream);
  }

  // int32 chat_type = 2;
  if (this->_internal_chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_type(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndChatServer.ChatData.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.ChatData)
  return target;
}

size_t ChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.ChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .UserAndChatServer.ChatProfile chat_profile = 1;
  if (this->_internal_has_chat_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_profile_);
  }

  // int32 chat_type = 2;
  if (this->_internal_chat_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatData::GetClassData() const { return &_class_data_; }

void ChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatData *>(to)->MergeFrom(
      static_cast<const ChatData &>(from));
}


void ChatData::MergeFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.ChatData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_chat_profile()) {
    _internal_mutable_chat_profile()->::UserAndChatServer::ChatProfile::MergeFrom(from._internal_chat_profile());
  }
  if (from._internal_chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatData::CopyFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.ChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatData::IsInitialized() const {
  return true;
}

void ChatData::InternalSwap(ChatData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatData, chat_type_)
      + sizeof(ChatData::chat_type_)
      - PROTOBUF_FIELD_OFFSET(ChatData, chat_profile_)>(
          reinterpret_cast<char*>(&chat_profile_),
          reinterpret_cast<char*>(&other->chat_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[1]);
}

// ===================================================================

class ReqChatConn::_Internal {
 public:
};

ReqChatConn::ReqChatConn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.ReqChatConn)
}
ReqChatConn::ReqChatConn(const ReqChatConn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.ReqChatConn)
}

inline void ReqChatConn::SharedCtor() {
account_id_ = int64_t{0};
}

ReqChatConn::~ReqChatConn() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.ReqChatConn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqChatConn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqChatConn::ArenaDtor(void* object) {
  ReqChatConn* _this = reinterpret_cast< ReqChatConn* >(object);
  (void)_this;
}
void ReqChatConn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqChatConn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChatConn::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.ReqChatConn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChatConn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqChatConn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.ReqChatConn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.ReqChatConn)
  return target;
}

size_t ReqChatConn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.ReqChatConn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqChatConn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqChatConn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqChatConn::GetClassData() const { return &_class_data_; }

void ReqChatConn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqChatConn *>(to)->MergeFrom(
      static_cast<const ReqChatConn &>(from));
}


void ReqChatConn::MergeFrom(const ReqChatConn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.ReqChatConn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqChatConn::CopyFrom(const ReqChatConn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.ReqChatConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChatConn::IsInitialized() const {
  return true;
}

void ReqChatConn::InternalSwap(ReqChatConn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChatConn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[2]);
}

// ===================================================================

class AnsChatConn::_Internal {
 public:
  static const ::UserAndChatServer::ChatProfile& profile(const AnsChatConn* msg);
};

const ::UserAndChatServer::ChatProfile&
AnsChatConn::_Internal::profile(const AnsChatConn* msg) {
  return *msg->profile_;
}
AnsChatConn::AnsChatConn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  profiles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.AnsChatConn)
}
AnsChatConn::AnsChatConn(const AnsChatConn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profiles_(from.profiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile()) {
    profile_ = new ::UserAndChatServer::ChatProfile(*from.profile_);
  } else {
    profile_ = nullptr;
  }
  room_no_ = from.room_no_;
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.AnsChatConn)
}

inline void AnsChatConn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&room_no_) -
    reinterpret_cast<char*>(&profile_)) + sizeof(room_no_));
}

AnsChatConn::~AnsChatConn() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.AnsChatConn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsChatConn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_;
}

void AnsChatConn::ArenaDtor(void* object) {
  AnsChatConn* _this = reinterpret_cast< AnsChatConn* >(object);
  (void)_this;
}
void AnsChatConn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsChatConn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsChatConn::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.AnsChatConn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profiles_.Clear();
  if (GetArenaForAllocation() == nullptr && profile_ != nullptr) {
    delete profile_;
  }
  profile_ = nullptr;
  room_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsChatConn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndChatServer.ChatProfile profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 room_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          room_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .UserAndChatServer.ChatProfile profiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsChatConn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.AnsChatConn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndChatServer.ChatProfile profile = 1;
  if (this->_internal_has_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::profile(this), target, stream);
  }

  // int32 room_no = 2;
  if (this->_internal_room_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_no(), target);
  }

  // repeated .UserAndChatServer.ChatProfile profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_profiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.AnsChatConn)
  return target;
}

size_t AnsChatConn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.AnsChatConn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UserAndChatServer.ChatProfile profiles = 3;
  total_size += 1UL * this->_internal_profiles_size();
  for (const auto& msg : this->profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .UserAndChatServer.ChatProfile profile = 1;
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profile_);
  }

  // int32 room_no = 2;
  if (this->_internal_room_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_room_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsChatConn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsChatConn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsChatConn::GetClassData() const { return &_class_data_; }

void AnsChatConn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsChatConn *>(to)->MergeFrom(
      static_cast<const AnsChatConn &>(from));
}


void AnsChatConn::MergeFrom(const AnsChatConn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.AnsChatConn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  profiles_.MergeFrom(from.profiles_);
  if (from._internal_has_profile()) {
    _internal_mutable_profile()->::UserAndChatServer::ChatProfile::MergeFrom(from._internal_profile());
  }
  if (from._internal_room_no() != 0) {
    _internal_set_room_no(from._internal_room_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsChatConn::CopyFrom(const AnsChatConn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.AnsChatConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsChatConn::IsInitialized() const {
  return true;
}

void AnsChatConn::InternalSwap(AnsChatConn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  profiles_.InternalSwap(&other->profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnsChatConn, room_no_)
      + sizeof(AnsChatConn::room_no_)
      - PROTOBUF_FIELD_OFFSET(AnsChatConn, profile_)>(
          reinterpret_cast<char*>(&profile_),
          reinterpret_cast<char*>(&other->profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsChatConn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[3]);
}

// ===================================================================

class ReqChat::_Internal {
 public:
  static const ::UserAndChatServer::ChatData& chat_data(const ReqChat* msg);
};

const ::UserAndChatServer::ChatData&
ReqChat::_Internal::chat_data(const ReqChat* msg) {
  return *msg->chat_data_;
}
ReqChat::ReqChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.ReqChat)
}
ReqChat::ReqChat(const ReqChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_data()) {
    chat_data_ = new ::UserAndChatServer::ChatData(*from.chat_data_);
  } else {
    chat_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.ReqChat)
}

inline void ReqChat::SharedCtor() {
chat_data_ = nullptr;
}

ReqChat::~ReqChat() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.ReqChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_data_;
}

void ReqChat::ArenaDtor(void* object) {
  ReqChat* _this = reinterpret_cast< ReqChat* >(object);
  (void)_this;
}
void ReqChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChat::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.ReqChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && chat_data_ != nullptr) {
    delete chat_data_;
  }
  chat_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndChatServer.ChatData chat_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.ReqChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndChatServer.ChatData chat_data = 1;
  if (this->_internal_has_chat_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.ReqChat)
  return target;
}

size_t ReqChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.ReqChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndChatServer.ChatData chat_data = 1;
  if (this->_internal_has_chat_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqChat::GetClassData() const { return &_class_data_; }

void ReqChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqChat *>(to)->MergeFrom(
      static_cast<const ReqChat &>(from));
}


void ReqChat::MergeFrom(const ReqChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.ReqChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_data()) {
    _internal_mutable_chat_data()->::UserAndChatServer::ChatData::MergeFrom(from._internal_chat_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqChat::CopyFrom(const ReqChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.ReqChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChat::IsInitialized() const {
  return true;
}

void ReqChat::InternalSwap(ReqChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(chat_data_, other->chat_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[4]);
}

// ===================================================================

class NotiChat::_Internal {
 public:
  static const ::UserAndChatServer::ChatData& chat_data(const NotiChat* msg);
};

const ::UserAndChatServer::ChatData&
NotiChat::_Internal::chat_data(const NotiChat* msg) {
  return *msg->chat_data_;
}
NotiChat::NotiChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.NotiChat)
}
NotiChat::NotiChat(const NotiChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_data()) {
    chat_data_ = new ::UserAndChatServer::ChatData(*from.chat_data_);
  } else {
    chat_data_ = nullptr;
  }
  chat_room_type_ = from.chat_room_type_;
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.NotiChat)
}

inline void NotiChat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_room_type_) -
    reinterpret_cast<char*>(&chat_data_)) + sizeof(chat_room_type_));
}

NotiChat::~NotiChat() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.NotiChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotiChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_data_;
}

void NotiChat::ArenaDtor(void* object) {
  NotiChat* _this = reinterpret_cast< NotiChat* >(object);
  (void)_this;
}
void NotiChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotiChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotiChat::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.NotiChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && chat_data_ != nullptr) {
    delete chat_data_;
  }
  chat_data_ = nullptr;
  chat_room_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotiChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndChatServer.ChatRoomType chat_room_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_room_type(static_cast<::UserAndChatServer::ChatRoomType>(val));
        } else
          goto handle_unusual;
        continue;
      // .UserAndChatServer.ChatData chat_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotiChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.NotiChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndChatServer.ChatRoomType chat_room_type = 1;
  if (this->_internal_chat_room_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chat_room_type(), target);
  }

  // .UserAndChatServer.ChatData chat_data = 2;
  if (this->_internal_has_chat_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chat_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.NotiChat)
  return target;
}

size_t NotiChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.NotiChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndChatServer.ChatData chat_data = 2;
  if (this->_internal_has_chat_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_data_);
  }

  // .UserAndChatServer.ChatRoomType chat_room_type = 1;
  if (this->_internal_chat_room_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_room_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotiChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotiChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotiChat::GetClassData() const { return &_class_data_; }

void NotiChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotiChat *>(to)->MergeFrom(
      static_cast<const NotiChat &>(from));
}


void NotiChat::MergeFrom(const NotiChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.NotiChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_data()) {
    _internal_mutable_chat_data()->::UserAndChatServer::ChatData::MergeFrom(from._internal_chat_data());
  }
  if (from._internal_chat_room_type() != 0) {
    _internal_set_chat_room_type(from._internal_chat_room_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotiChat::CopyFrom(const NotiChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.NotiChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiChat::IsInitialized() const {
  return true;
}

void NotiChat::InternalSwap(NotiChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotiChat, chat_room_type_)
      + sizeof(NotiChat::chat_room_type_)
      - PROTOBUF_FIELD_OFFSET(NotiChat, chat_data_)>(
          reinterpret_cast<char*>(&chat_data_),
          reinterpret_cast<char*>(&other->chat_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotiChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[5]);
}

// ===================================================================

class ReqEnterChatRoom::_Internal {
 public:
};

ReqEnterChatRoom::ReqEnterChatRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.ReqEnterChatRoom)
}
ReqEnterChatRoom::ReqEnterChatRoom(const ReqEnterChatRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_room_no_ = from.chat_room_no_;
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.ReqEnterChatRoom)
}

inline void ReqEnterChatRoom::SharedCtor() {
chat_room_no_ = 0;
}

ReqEnterChatRoom::~ReqEnterChatRoom() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.ReqEnterChatRoom)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqEnterChatRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqEnterChatRoom::ArenaDtor(void* object) {
  ReqEnterChatRoom* _this = reinterpret_cast< ReqEnterChatRoom* >(object);
  (void)_this;
}
void ReqEnterChatRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqEnterChatRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqEnterChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.ReqEnterChatRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqEnterChatRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 chat_room_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          chat_room_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqEnterChatRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.ReqEnterChatRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chat_room_no = 1;
  if (this->_internal_chat_room_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chat_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.ReqEnterChatRoom)
  return target;
}

size_t ReqEnterChatRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.ReqEnterChatRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chat_room_no = 1;
  if (this->_internal_chat_room_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_room_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqEnterChatRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqEnterChatRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqEnterChatRoom::GetClassData() const { return &_class_data_; }

void ReqEnterChatRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqEnterChatRoom *>(to)->MergeFrom(
      static_cast<const ReqEnterChatRoom &>(from));
}


void ReqEnterChatRoom::MergeFrom(const ReqEnterChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.ReqEnterChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_chat_room_no() != 0) {
    _internal_set_chat_room_no(from._internal_chat_room_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqEnterChatRoom::CopyFrom(const ReqEnterChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.ReqEnterChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterChatRoom::IsInitialized() const {
  return true;
}

void ReqEnterChatRoom::InternalSwap(ReqEnterChatRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(chat_room_no_, other->chat_room_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterChatRoom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[6]);
}

// ===================================================================

class NotiEnterChatRoom::_Internal {
 public:
  static const ::UserAndChatServer::ChatProfile& enter_profile(const NotiEnterChatRoom* msg);
};

const ::UserAndChatServer::ChatProfile&
NotiEnterChatRoom::_Internal::enter_profile(const NotiEnterChatRoom* msg) {
  return *msg->enter_profile_;
}
NotiEnterChatRoom::NotiEnterChatRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.NotiEnterChatRoom)
}
NotiEnterChatRoom::NotiEnterChatRoom(const NotiEnterChatRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enter_profile()) {
    enter_profile_ = new ::UserAndChatServer::ChatProfile(*from.enter_profile_);
  } else {
    enter_profile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.NotiEnterChatRoom)
}

inline void NotiEnterChatRoom::SharedCtor() {
enter_profile_ = nullptr;
}

NotiEnterChatRoom::~NotiEnterChatRoom() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.NotiEnterChatRoom)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotiEnterChatRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enter_profile_;
}

void NotiEnterChatRoom::ArenaDtor(void* object) {
  NotiEnterChatRoom* _this = reinterpret_cast< NotiEnterChatRoom* >(object);
  (void)_this;
}
void NotiEnterChatRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotiEnterChatRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotiEnterChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.NotiEnterChatRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enter_profile_ != nullptr) {
    delete enter_profile_;
  }
  enter_profile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotiEnterChatRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndChatServer.ChatProfile enter_profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enter_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotiEnterChatRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.NotiEnterChatRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndChatServer.ChatProfile enter_profile = 1;
  if (this->_internal_has_enter_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enter_profile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.NotiEnterChatRoom)
  return target;
}

size_t NotiEnterChatRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.NotiEnterChatRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndChatServer.ChatProfile enter_profile = 1;
  if (this->_internal_has_enter_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enter_profile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotiEnterChatRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotiEnterChatRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotiEnterChatRoom::GetClassData() const { return &_class_data_; }

void NotiEnterChatRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotiEnterChatRoom *>(to)->MergeFrom(
      static_cast<const NotiEnterChatRoom &>(from));
}


void NotiEnterChatRoom::MergeFrom(const NotiEnterChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.NotiEnterChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enter_profile()) {
    _internal_mutable_enter_profile()->::UserAndChatServer::ChatProfile::MergeFrom(from._internal_enter_profile());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotiEnterChatRoom::CopyFrom(const NotiEnterChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.NotiEnterChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiEnterChatRoom::IsInitialized() const {
  return true;
}

void NotiEnterChatRoom::InternalSwap(NotiEnterChatRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enter_profile_, other->enter_profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotiEnterChatRoom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[7]);
}

// ===================================================================

class NotiLeaveChatRoom::_Internal {
 public:
};

NotiLeaveChatRoom::NotiLeaveChatRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndChatServer.NotiLeaveChatRoom)
}
NotiLeaveChatRoom::NotiLeaveChatRoom(const NotiLeaveChatRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accoun_id_ = from.accoun_id_;
  // @@protoc_insertion_point(copy_constructor:UserAndChatServer.NotiLeaveChatRoom)
}

inline void NotiLeaveChatRoom::SharedCtor() {
accoun_id_ = int64_t{0};
}

NotiLeaveChatRoom::~NotiLeaveChatRoom() {
  // @@protoc_insertion_point(destructor:UserAndChatServer.NotiLeaveChatRoom)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotiLeaveChatRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NotiLeaveChatRoom::ArenaDtor(void* object) {
  NotiLeaveChatRoom* _this = reinterpret_cast< NotiLeaveChatRoom* >(object);
  (void)_this;
}
void NotiLeaveChatRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotiLeaveChatRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotiLeaveChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndChatServer.NotiLeaveChatRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accoun_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotiLeaveChatRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 accoun_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          accoun_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotiLeaveChatRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndChatServer.NotiLeaveChatRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 accoun_id = 1;
  if (this->_internal_accoun_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_accoun_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndChatServer.NotiLeaveChatRoom)
  return target;
}

size_t NotiLeaveChatRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndChatServer.NotiLeaveChatRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 accoun_id = 1;
  if (this->_internal_accoun_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_accoun_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotiLeaveChatRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotiLeaveChatRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotiLeaveChatRoom::GetClassData() const { return &_class_data_; }

void NotiLeaveChatRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotiLeaveChatRoom *>(to)->MergeFrom(
      static_cast<const NotiLeaveChatRoom &>(from));
}


void NotiLeaveChatRoom::MergeFrom(const NotiLeaveChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndChatServer.NotiLeaveChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accoun_id() != 0) {
    _internal_set_accoun_id(from._internal_accoun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotiLeaveChatRoom::CopyFrom(const NotiLeaveChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndChatServer.NotiLeaveChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiLeaveChatRoom::IsInitialized() const {
  return true;
}

void NotiLeaveChatRoom::InternalSwap(NotiLeaveChatRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(accoun_id_, other->accoun_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotiLeaveChatRoom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndChatServer_2eproto_getter, &descriptor_table_UserAndChatServer_2eproto_once,
      file_level_metadata_UserAndChatServer_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserAndChatServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserAndChatServer::ChatProfile* Arena::CreateMaybeMessage< ::UserAndChatServer::ChatProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::ChatProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::ChatData* Arena::CreateMaybeMessage< ::UserAndChatServer::ChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::ChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::ReqChatConn* Arena::CreateMaybeMessage< ::UserAndChatServer::ReqChatConn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::ReqChatConn >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::AnsChatConn* Arena::CreateMaybeMessage< ::UserAndChatServer::AnsChatConn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::AnsChatConn >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::ReqChat* Arena::CreateMaybeMessage< ::UserAndChatServer::ReqChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::ReqChat >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::NotiChat* Arena::CreateMaybeMessage< ::UserAndChatServer::NotiChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::NotiChat >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::ReqEnterChatRoom* Arena::CreateMaybeMessage< ::UserAndChatServer::ReqEnterChatRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::ReqEnterChatRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::NotiEnterChatRoom* Arena::CreateMaybeMessage< ::UserAndChatServer::NotiEnterChatRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::NotiEnterChatRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndChatServer::NotiLeaveChatRoom* Arena::CreateMaybeMessage< ::UserAndChatServer::NotiLeaveChatRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndChatServer::NotiLeaveChatRoom >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
