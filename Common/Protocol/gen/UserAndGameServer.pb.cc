// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAndGameServer.proto

#include "UserAndGameServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace UserAndGameServer {
constexpr ItemData::ItemData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basis_id_(int64_t{0})
  , cnt_(int64_t{0})
  , cnt_prev_(int64_t{0}){}
struct ItemDataDefaultTypeInternal {
  constexpr ItemDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemDataDefaultTypeInternal() {}
  union {
    ItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemDataDefaultTypeInternal _ItemData_default_instance_;
constexpr CostumeData::CostumeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basis_id_(int64_t{0}){}
struct CostumeDataDefaultTypeInternal {
  constexpr CostumeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CostumeDataDefaultTypeInternal() {}
  union {
    CostumeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CostumeDataDefaultTypeInternal _CostumeData_default_instance_;
constexpr CharacterData::CharacterData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basis_id_(int64_t{0}){}
struct CharacterDataDefaultTypeInternal {
  constexpr CharacterDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterDataDefaultTypeInternal() {}
  union {
    CharacterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterDataDefaultTypeInternal _CharacterData_default_instance_;
constexpr Inventory::Inventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , costumes_()
  , characters_(){}
struct InventoryDefaultTypeInternal {
  constexpr InventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InventoryDefaultTypeInternal() {}
  union {
    Inventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InventoryDefaultTypeInternal _Inventory_default_instance_;
constexpr GameProfile::GameProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : greeting_ment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0)
  , main_hero_id_(0)
  , main_frame_id_(0){}
struct GameProfileDefaultTypeInternal {
  constexpr GameProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameProfileDefaultTypeInternal() {}
  union {
    GameProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameProfileDefaultTypeInternal _GameProfile_default_instance_;
constexpr ChatProfile::ChatProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , profile_id_(0)
  , profile_hero_id_(0)
  , profile_frame_id_(0)
  , main_hero_id_(0){}
struct ChatProfileDefaultTypeInternal {
  constexpr ChatProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProfileDefaultTypeInternal() {}
  union {
    ChatProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProfileDefaultTypeInternal _ChatProfile_default_instance_;
constexpr ChatData::ChatData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_profile_(nullptr)
  , chat_type_(0){}
struct ChatDataDefaultTypeInternal {
  constexpr ChatDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatDataDefaultTypeInternal() {}
  union {
    ChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatDataDefaultTypeInternal _ChatData_default_instance_;
constexpr LoginData::LoginData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_platform_(0){}
struct LoginDataDefaultTypeInternal {
  constexpr LoginDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginDataDefaultTypeInternal() {}
  union {
    LoginData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginDataDefaultTypeInternal _LoginData_default_instance_;
constexpr LoginResultData::LoginResultData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_success_(false){}
struct LoginResultDataDefaultTypeInternal {
  constexpr LoginResultDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginResultDataDefaultTypeInternal() {}
  union {
    LoginResultData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginResultDataDefaultTypeInternal _LoginResultData_default_instance_;
constexpr NotiErrInfo::NotiErrInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_no_(0)
  , err_detail_(0){}
struct NotiErrInfoDefaultTypeInternal {
  constexpr NotiErrInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotiErrInfoDefaultTypeInternal() {}
  union {
    NotiErrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotiErrInfoDefaultTypeInternal _NotiErrInfo_default_instance_;
constexpr ReqPublicKey::ReqPublicKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqPublicKeyDefaultTypeInternal {
  constexpr ReqPublicKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPublicKeyDefaultTypeInternal() {}
  union {
    ReqPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPublicKeyDefaultTypeInternal _ReqPublicKey_default_instance_;
constexpr AnsPublicKey::AnsPublicKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AnsPublicKeyDefaultTypeInternal {
  constexpr AnsPublicKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsPublicKeyDefaultTypeInternal() {}
  union {
    AnsPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsPublicKeyDefaultTypeInternal _AnsPublicKey_default_instance_;
constexpr ReqConnect::ReqConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqConnectDefaultTypeInternal {
  constexpr ReqConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqConnectDefaultTypeInternal() {}
  union {
    ReqConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqConnectDefaultTypeInternal _ReqConnect_default_instance_;
constexpr AnsConnect::AnsConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_success_(false){}
struct AnsConnectDefaultTypeInternal {
  constexpr AnsConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsConnectDefaultTypeInternal() {}
  union {
    AnsConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsConnectDefaultTypeInternal _AnsConnect_default_instance_;
constexpr ReqTestMsg::ReqTestMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqTestMsgDefaultTypeInternal {
  constexpr ReqTestMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTestMsgDefaultTypeInternal() {}
  union {
    ReqTestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTestMsgDefaultTypeInternal _ReqTestMsg_default_instance_;
constexpr AnsTestMsg::AnsTestMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AnsTestMsgDefaultTypeInternal {
  constexpr AnsTestMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsTestMsgDefaultTypeInternal() {}
  union {
    AnsTestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsTestMsgDefaultTypeInternal _AnsTestMsg_default_instance_;
constexpr ReqChat::ReqChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_data_(nullptr){}
struct ReqChatDefaultTypeInternal {
  constexpr ReqChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqChatDefaultTypeInternal() {}
  union {
    ReqChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqChatDefaultTypeInternal _ReqChat_default_instance_;
constexpr AnsChat::AnsChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_data_(nullptr){}
struct AnsChatDefaultTypeInternal {
  constexpr AnsChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsChatDefaultTypeInternal() {}
  union {
    AnsChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsChatDefaultTypeInternal _AnsChat_default_instance_;
constexpr ReqLogin::ReqLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : login_data_(nullptr){}
struct ReqLoginDefaultTypeInternal {
  constexpr ReqLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLoginDefaultTypeInternal() {}
  union {
    ReqLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
constexpr AnsLogin::AnsLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : login_result_data_(nullptr)
  , user_profile_(nullptr)
  , user_inventory_(nullptr){}
struct AnsLoginDefaultTypeInternal {
  constexpr AnsLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnsLoginDefaultTypeInternal() {}
  union {
    AnsLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnsLoginDefaultTypeInternal _AnsLogin_default_instance_;
}  // namespace UserAndGameServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UserAndGameServer_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_UserAndGameServer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UserAndGameServer_2eproto = nullptr;

const uint32_t TableStruct_UserAndGameServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ItemData, basis_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ItemData, cnt_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ItemData, cnt_prev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::CostumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::CostumeData, basis_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::CharacterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::CharacterData, basis_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::Inventory, items_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::Inventory, costumes_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::Inventory, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::GameProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::GameProfile, account_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::GameProfile, greeting_ment_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::GameProfile, main_hero_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::GameProfile, main_frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatProfile, profile_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatProfile, nick_name_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatProfile, profile_hero_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatProfile, profile_frame_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatProfile, main_hero_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatData, chat_type_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatData, chat_profile_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ChatData, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::LoginData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::LoginData, s_id_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::LoginData, login_platform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::LoginResultData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::LoginResultData, is_success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::NotiErrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::NotiErrInfo, err_no_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::NotiErrInfo, err_detail_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::NotiErrInfo, err_desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqPublicKey, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsPublicKey, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqConnect, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsConnect, is_success_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsConnect, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqTestMsg, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsTestMsg, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqChat, chat_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsChat, chat_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::ReqLogin, login_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsLogin, login_result_data_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsLogin, user_profile_),
  PROTOBUF_FIELD_OFFSET(::UserAndGameServer::AnsLogin, user_inventory_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::UserAndGameServer::ItemData)},
  { 9, -1, -1, sizeof(::UserAndGameServer::CostumeData)},
  { 16, -1, -1, sizeof(::UserAndGameServer::CharacterData)},
  { 23, -1, -1, sizeof(::UserAndGameServer::Inventory)},
  { 32, -1, -1, sizeof(::UserAndGameServer::GameProfile)},
  { 42, -1, -1, sizeof(::UserAndGameServer::ChatProfile)},
  { 53, -1, -1, sizeof(::UserAndGameServer::ChatData)},
  { 62, -1, -1, sizeof(::UserAndGameServer::LoginData)},
  { 70, -1, -1, sizeof(::UserAndGameServer::LoginResultData)},
  { 77, -1, -1, sizeof(::UserAndGameServer::NotiErrInfo)},
  { 86, -1, -1, sizeof(::UserAndGameServer::ReqPublicKey)},
  { 93, -1, -1, sizeof(::UserAndGameServer::AnsPublicKey)},
  { 100, -1, -1, sizeof(::UserAndGameServer::ReqConnect)},
  { 107, -1, -1, sizeof(::UserAndGameServer::AnsConnect)},
  { 115, -1, -1, sizeof(::UserAndGameServer::ReqTestMsg)},
  { 122, -1, -1, sizeof(::UserAndGameServer::AnsTestMsg)},
  { 129, -1, -1, sizeof(::UserAndGameServer::ReqChat)},
  { 136, -1, -1, sizeof(::UserAndGameServer::AnsChat)},
  { 143, -1, -1, sizeof(::UserAndGameServer::ReqLogin)},
  { 150, -1, -1, sizeof(::UserAndGameServer::AnsLogin)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ItemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_CostumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_CharacterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_Inventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_GameProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ChatProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ChatData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_LoginData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_LoginResultData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_NotiErrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ReqPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_AnsPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ReqConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_AnsConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ReqTestMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_AnsTestMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ReqChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_AnsChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_ReqLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserAndGameServer::_AnsLogin_default_instance_),
};

const char descriptor_table_protodef_UserAndGameServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027UserAndGameServer.proto\022\021UserAndGameSe"
  "rver\";\n\010ItemData\022\020\n\010basis_id\030\001 \001(\003\022\013\n\003cn"
  "t\030\002 \001(\003\022\020\n\010cnt_prev\030\003 \001(\003\"\037\n\013CostumeData"
  "\022\020\n\010basis_id\030\001 \001(\003\"!\n\rCharacterData\022\020\n\010b"
  "asis_id\030\001 \001(\003\"\237\001\n\tInventory\022*\n\005items\030\001 \003"
  "(\0132\033.UserAndGameServer.ItemData\0220\n\010costu"
  "mes\030\002 \003(\0132\036.UserAndGameServer.CostumeDat"
  "a\0224\n\ncharacters\030\003 \003(\0132 .UserAndGameServe"
  "r.CharacterData\"e\n\013GameProfile\022\022\n\naccoun"
  "t_id\030\001 \001(\005\022\025\n\rgreeting_ment\030\002 \001(\t\022\024\n\014mai"
  "n_hero_id\030\003 \001(\005\022\025\n\rmain_frame_id\030\004 \001(\005\"}"
  "\n\013ChatProfile\022\022\n\nprofile_id\030\001 \001(\005\022\021\n\tnic"
  "k_name\030\002 \001(\t\022\027\n\017profile_hero_id\030\003 \001(\005\022\030\n"
  "\020profile_frame_id\030\004 \001(\005\022\024\n\014main_hero_id\030"
  "\005 \001(\005\"`\n\010ChatData\022\021\n\tchat_type\030\001 \001(\005\0224\n\014"
  "chat_profile\030\002 \001(\0132\036.UserAndGameServer.C"
  "hatProfile\022\013\n\003msg\030\003 \001(\t\"1\n\tLoginData\022\014\n\004"
  "s_id\030\001 \001(\t\022\026\n\016login_platform\030\002 \001(\005\"%\n\017Lo"
  "ginResultData\022\022\n\nis_success\030\001 \001(\010\"C\n\013Not"
  "iErrInfo\022\016\n\006err_no\030\001 \001(\005\022\022\n\nerr_detail\030\002"
  " \001(\005\022\020\n\010err_desc\030\003 \001(\t\"!\n\014ReqPublicKey\022\021"
  "\n\tdevice_id\030\001 \001(\t\"\"\n\014AnsPublicKey\022\022\n\npub"
  "lic_key\030\001 \001(\t\"\037\n\nReqConnect\022\021\n\tdevice_id"
  "\030\001 \001(\t\"4\n\nAnsConnect\022\022\n\nis_success\030\001 \001(\010"
  "\022\022\n\nsession_id\030\002 \001(\t\"\031\n\nReqTestMsg\022\013\n\003ms"
  "g\030\001 \001(\t\"\031\n\nAnsTestMsg\022\013\n\003msg\030\001 \001(\t\"9\n\007Re"
  "qChat\022.\n\tchat_data\030\001 \001(\0132\033.UserAndGameSe"
  "rver.ChatData\"9\n\007AnsChat\022.\n\tchat_data\030\001 "
  "\001(\0132\033.UserAndGameServer.ChatData\"<\n\010ReqL"
  "ogin\0220\n\nlogin_data\030\001 \001(\0132\034.UserAndGameSe"
  "rver.LoginData\"\265\001\n\010AnsLogin\022=\n\021login_res"
  "ult_data\030\001 \001(\0132\".UserAndGameServer.Login"
  "ResultData\0224\n\014user_profile\030\002 \001(\0132\036.UserA"
  "ndGameServer.GameProfile\0224\n\016user_invento"
  "ry\030\003 \001(\0132\034.UserAndGameServer.Inventory*D"
  "\n\007MsgType\022\024\n\020INVALID_MSG_TYPE\020\000\022\007\n\003Req\020\001"
  "\022\007\n\003Ans\020\002\022\010\n\004Noti\020\003\022\007\n\003Err\020\004*k\n\010Protocol"
  "\022\024\n\020INVALID_PROTOCOL\020\000\022\013\n\007ErrInfo\020\001\022\r\n\tP"
  "ublicKey\020\002\022\013\n\007Connect\020\003\022\013\n\007TestMsg\020\004\022\010\n\004"
  "Chat\020\005\022\t\n\005Login\020\006b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UserAndGameServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserAndGameServer_2eproto = {
  false, false, 1585, descriptor_table_protodef_UserAndGameServer_2eproto, "UserAndGameServer.proto", 
  &descriptor_table_UserAndGameServer_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_UserAndGameServer_2eproto::offsets,
  file_level_metadata_UserAndGameServer_2eproto, file_level_enum_descriptors_UserAndGameServer_2eproto, file_level_service_descriptors_UserAndGameServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_UserAndGameServer_2eproto_getter() {
  return &descriptor_table_UserAndGameServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UserAndGameServer_2eproto(&descriptor_table_UserAndGameServer_2eproto);
namespace UserAndGameServer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserAndGameServer_2eproto);
  return file_level_enum_descriptors_UserAndGameServer_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserAndGameServer_2eproto);
  return file_level_enum_descriptors_UserAndGameServer_2eproto[1];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ItemData::_Internal {
 public:
};

ItemData::ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ItemData)
}
ItemData::ItemData(const ItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&basis_id_, &from.basis_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cnt_prev_) -
    reinterpret_cast<char*>(&basis_id_)) + sizeof(cnt_prev_));
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ItemData)
}

inline void ItemData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&basis_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cnt_prev_) -
    reinterpret_cast<char*>(&basis_id_)) + sizeof(cnt_prev_));
}

ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ItemData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemData::ArenaDtor(void* object) {
  ItemData* _this = reinterpret_cast< ItemData* >(object);
  (void)_this;
}
void ItemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&basis_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cnt_prev_) -
      reinterpret_cast<char*>(&basis_id_)) + sizeof(cnt_prev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 basis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          basis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cnt_prev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          cnt_prev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 basis_id = 1;
  if (this->_internal_basis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_basis_id(), target);
  }

  // int64 cnt = 2;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cnt(), target);
  }

  // int64 cnt_prev = 3;
  if (this->_internal_cnt_prev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cnt_prev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ItemData)
  return target;
}

size_t ItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 basis_id = 1;
  if (this->_internal_basis_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basis_id());
  }

  // int64 cnt = 2;
  if (this->_internal_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_cnt());
  }

  // int64 cnt_prev = 3;
  if (this->_internal_cnt_prev() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_cnt_prev());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemData::GetClassData() const { return &_class_data_; }

void ItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemData *>(to)->MergeFrom(
      static_cast<const ItemData &>(from));
}


void ItemData::MergeFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ItemData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_basis_id() != 0) {
    _internal_set_basis_id(from._internal_basis_id());
  }
  if (from._internal_cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  if (from._internal_cnt_prev() != 0) {
    _internal_set_cnt_prev(from._internal_cnt_prev());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemData::CopyFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  return true;
}

void ItemData::InternalSwap(ItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemData, cnt_prev_)
      + sizeof(ItemData::cnt_prev_)
      - PROTOBUF_FIELD_OFFSET(ItemData, basis_id_)>(
          reinterpret_cast<char*>(&basis_id_),
          reinterpret_cast<char*>(&other->basis_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[0]);
}

// ===================================================================

class CostumeData::_Internal {
 public:
};

CostumeData::CostumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.CostumeData)
}
CostumeData::CostumeData(const CostumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basis_id_ = from.basis_id_;
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.CostumeData)
}

inline void CostumeData::SharedCtor() {
basis_id_ = int64_t{0};
}

CostumeData::~CostumeData() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.CostumeData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CostumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CostumeData::ArenaDtor(void* object) {
  CostumeData* _this = reinterpret_cast< CostumeData* >(object);
  (void)_this;
}
void CostumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CostumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.CostumeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basis_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 basis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          basis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostumeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.CostumeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 basis_id = 1;
  if (this->_internal_basis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_basis_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.CostumeData)
  return target;
}

size_t CostumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.CostumeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 basis_id = 1;
  if (this->_internal_basis_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basis_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostumeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CostumeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostumeData::GetClassData() const { return &_class_data_; }

void CostumeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CostumeData *>(to)->MergeFrom(
      static_cast<const CostumeData &>(from));
}


void CostumeData::MergeFrom(const CostumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.CostumeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_basis_id() != 0) {
    _internal_set_basis_id(from._internal_basis_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostumeData::CopyFrom(const CostumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.CostumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostumeData::IsInitialized() const {
  return true;
}

void CostumeData::InternalSwap(CostumeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(basis_id_, other->basis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostumeData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[1]);
}

// ===================================================================

class CharacterData::_Internal {
 public:
};

CharacterData::CharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.CharacterData)
}
CharacterData::CharacterData(const CharacterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basis_id_ = from.basis_id_;
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.CharacterData)
}

inline void CharacterData::SharedCtor() {
basis_id_ = int64_t{0};
}

CharacterData::~CharacterData() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.CharacterData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharacterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CharacterData::ArenaDtor(void* object) {
  CharacterData* _this = reinterpret_cast< CharacterData* >(object);
  (void)_this;
}
void CharacterData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.CharacterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basis_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 basis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          basis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.CharacterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 basis_id = 1;
  if (this->_internal_basis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_basis_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.CharacterData)
  return target;
}

size_t CharacterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.CharacterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 basis_id = 1;
  if (this->_internal_basis_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basis_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharacterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterData::GetClassData() const { return &_class_data_; }

void CharacterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CharacterData *>(to)->MergeFrom(
      static_cast<const CharacterData &>(from));
}


void CharacterData::MergeFrom(const CharacterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.CharacterData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_basis_id() != 0) {
    _internal_set_basis_id(from._internal_basis_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterData::CopyFrom(const CharacterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.CharacterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterData::IsInitialized() const {
  return true;
}

void CharacterData::InternalSwap(CharacterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(basis_id_, other->basis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[2]);
}

// ===================================================================

class Inventory::_Internal {
 public:
};

Inventory::Inventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena),
  costumes_(arena),
  characters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_),
      costumes_(from.costumes_),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.Inventory)
}

inline void Inventory::SharedCtor() {
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.Inventory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Inventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Inventory::ArenaDtor(void* object) {
  Inventory* _this = reinterpret_cast< Inventory* >(object);
  (void)_this;
}
void Inventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.Inventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  costumes_.Clear();
  characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UserAndGameServer.ItemData items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UserAndGameServer.CostumeData costumes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_costumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UserAndGameServer.CharacterData characters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.Inventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserAndGameServer.ItemData items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // repeated .UserAndGameServer.CostumeData costumes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_costumes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_costumes(i), target, stream);
  }

  // repeated .UserAndGameServer.CharacterData characters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.Inventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UserAndGameServer.ItemData items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UserAndGameServer.CostumeData costumes = 2;
  total_size += 1UL * this->_internal_costumes_size();
  for (const auto& msg : this->costumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UserAndGameServer.CharacterData characters = 3;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Inventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inventory::GetClassData() const { return &_class_data_; }

void Inventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Inventory *>(to)->MergeFrom(
      static_cast<const Inventory &>(from));
}


void Inventory::MergeFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.Inventory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  costumes_.MergeFrom(from.costumes_);
  characters_.MergeFrom(from.characters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  costumes_.InternalSwap(&other->costumes_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[3]);
}

// ===================================================================

class GameProfile::_Internal {
 public:
};

GameProfile::GameProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.GameProfile)
}
GameProfile::GameProfile(const GameProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  greeting_ment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    greeting_ment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_greeting_ment().empty()) {
    greeting_ment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_greeting_ment(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&main_frame_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(main_frame_id_));
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.GameProfile)
}

inline void GameProfile::SharedCtor() {
greeting_ment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  greeting_ment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&main_frame_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(main_frame_id_));
}

GameProfile::~GameProfile() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.GameProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  greeting_ment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameProfile::ArenaDtor(void* object) {
  GameProfile* _this = reinterpret_cast< GameProfile* >(object);
  (void)_this;
}
void GameProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.GameProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  greeting_ment_.ClearToEmpty();
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_frame_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(main_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string greeting_ment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_greeting_ment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.GameProfile.greeting_ment"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 main_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          main_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 main_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          main_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.GameProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // string greeting_ment = 2;
  if (!this->_internal_greeting_ment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_greeting_ment().data(), static_cast<int>(this->_internal_greeting_ment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.GameProfile.greeting_ment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_greeting_ment(), target);
  }

  // int32 main_hero_id = 3;
  if (this->_internal_main_hero_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_main_hero_id(), target);
  }

  // int32 main_frame_id = 4;
  if (this->_internal_main_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_main_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.GameProfile)
  return target;
}

size_t GameProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.GameProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string greeting_ment = 2;
  if (!this->_internal_greeting_ment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_greeting_ment());
  }

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
  }

  // int32 main_hero_id = 3;
  if (this->_internal_main_hero_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_main_hero_id());
  }

  // int32 main_frame_id = 4;
  if (this->_internal_main_frame_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_main_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameProfile::GetClassData() const { return &_class_data_; }

void GameProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameProfile *>(to)->MergeFrom(
      static_cast<const GameProfile &>(from));
}


void GameProfile::MergeFrom(const GameProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.GameProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_greeting_ment().empty()) {
    _internal_set_greeting_ment(from._internal_greeting_ment());
  }
  if (from._internal_account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_main_hero_id() != 0) {
    _internal_set_main_hero_id(from._internal_main_hero_id());
  }
  if (from._internal_main_frame_id() != 0) {
    _internal_set_main_frame_id(from._internal_main_frame_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameProfile::CopyFrom(const GameProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.GameProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProfile::IsInitialized() const {
  return true;
}

void GameProfile::InternalSwap(GameProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &greeting_ment_, lhs_arena,
      &other->greeting_ment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameProfile, main_frame_id_)
      + sizeof(GameProfile::main_frame_id_)
      - PROTOBUF_FIELD_OFFSET(GameProfile, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[4]);
}

// ===================================================================

class ChatProfile::_Internal {
 public:
};

ChatProfile::ChatProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ChatProfile)
}
ChatProfile::ChatProfile(const ChatProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nick_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&profile_id_, &from.profile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&main_hero_id_) -
    reinterpret_cast<char*>(&profile_id_)) + sizeof(main_hero_id_));
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ChatProfile)
}

inline void ChatProfile::SharedCtor() {
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nick_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profile_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&main_hero_id_) -
    reinterpret_cast<char*>(&profile_id_)) + sizeof(main_hero_id_));
}

ChatProfile::~ChatProfile() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ChatProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProfile::ArenaDtor(void* object) {
  ChatProfile* _this = reinterpret_cast< ChatProfile* >(object);
  (void)_this;
}
void ChatProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ChatProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  ::memset(&profile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_hero_id_) -
      reinterpret_cast<char*>(&profile_id_)) + sizeof(main_hero_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 profile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          profile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.ChatProfile.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 profile_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          profile_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 profile_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          profile_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 main_hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          main_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ChatProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 profile_id = 1;
  if (this->_internal_profile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_profile_id(), target);
  }

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.ChatProfile.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // int32 profile_hero_id = 3;
  if (this->_internal_profile_hero_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_profile_hero_id(), target);
  }

  // int32 profile_frame_id = 4;
  if (this->_internal_profile_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_profile_frame_id(), target);
  }

  // int32 main_hero_id = 5;
  if (this->_internal_main_hero_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_main_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ChatProfile)
  return target;
}

size_t ChatProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ChatProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // int32 profile_id = 1;
  if (this->_internal_profile_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_profile_id());
  }

  // int32 profile_hero_id = 3;
  if (this->_internal_profile_hero_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_profile_hero_id());
  }

  // int32 profile_frame_id = 4;
  if (this->_internal_profile_frame_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_profile_frame_id());
  }

  // int32 main_hero_id = 5;
  if (this->_internal_main_hero_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_main_hero_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatProfile::GetClassData() const { return &_class_data_; }

void ChatProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatProfile *>(to)->MergeFrom(
      static_cast<const ChatProfile &>(from));
}


void ChatProfile::MergeFrom(const ChatProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ChatProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from._internal_profile_id() != 0) {
    _internal_set_profile_id(from._internal_profile_id());
  }
  if (from._internal_profile_hero_id() != 0) {
    _internal_set_profile_hero_id(from._internal_profile_hero_id());
  }
  if (from._internal_profile_frame_id() != 0) {
    _internal_set_profile_frame_id(from._internal_profile_frame_id());
  }
  if (from._internal_main_hero_id() != 0) {
    _internal_set_main_hero_id(from._internal_main_hero_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatProfile::CopyFrom(const ChatProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ChatProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProfile::IsInitialized() const {
  return true;
}

void ChatProfile::InternalSwap(ChatProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatProfile, main_hero_id_)
      + sizeof(ChatProfile::main_hero_id_)
      - PROTOBUF_FIELD_OFFSET(ChatProfile, profile_id_)>(
          reinterpret_cast<char*>(&profile_id_),
          reinterpret_cast<char*>(&other->profile_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[5]);
}

// ===================================================================

class ChatData::_Internal {
 public:
  static const ::UserAndGameServer::ChatProfile& chat_profile(const ChatData* msg);
};

const ::UserAndGameServer::ChatProfile&
ChatData::_Internal::chat_profile(const ChatData* msg) {
  return *msg->chat_profile_;
}
ChatData::ChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ChatData)
}
ChatData::ChatData(const ChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chat_profile()) {
    chat_profile_ = new ::UserAndGameServer::ChatProfile(*from.chat_profile_);
  } else {
    chat_profile_ = nullptr;
  }
  chat_type_ = from.chat_type_;
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ChatData)
}

inline void ChatData::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_profile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_profile_)) + sizeof(chat_type_));
}

ChatData::~ChatData() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ChatData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_profile_;
}

void ChatData::ArenaDtor(void* object) {
  ChatData* _this = reinterpret_cast< ChatData* >(object);
  (void)_this;
}
void ChatData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && chat_profile_ != nullptr) {
    delete chat_profile_;
  }
  chat_profile_ = nullptr;
  chat_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 chat_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          chat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UserAndGameServer.ChatProfile chat_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.ChatData.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chat_type = 1;
  if (this->_internal_chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chat_type(), target);
  }

  // .UserAndGameServer.ChatProfile chat_profile = 2;
  if (this->_internal_has_chat_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chat_profile(this), target, stream);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.ChatData.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ChatData)
  return target;
}

size_t ChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .UserAndGameServer.ChatProfile chat_profile = 2;
  if (this->_internal_has_chat_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_profile_);
  }

  // int32 chat_type = 1;
  if (this->_internal_chat_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatData::GetClassData() const { return &_class_data_; }

void ChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatData *>(to)->MergeFrom(
      static_cast<const ChatData &>(from));
}


void ChatData::MergeFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ChatData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_chat_profile()) {
    _internal_mutable_chat_profile()->::UserAndGameServer::ChatProfile::MergeFrom(from._internal_chat_profile());
  }
  if (from._internal_chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatData::CopyFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatData::IsInitialized() const {
  return true;
}

void ChatData::InternalSwap(ChatData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatData, chat_type_)
      + sizeof(ChatData::chat_type_)
      - PROTOBUF_FIELD_OFFSET(ChatData, chat_profile_)>(
          reinterpret_cast<char*>(&chat_profile_),
          reinterpret_cast<char*>(&other->chat_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[6]);
}

// ===================================================================

class LoginData::_Internal {
 public:
};

LoginData::LoginData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.LoginData)
}
LoginData::LoginData(const LoginData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_id().empty()) {
    s_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_id(), 
      GetArenaForAllocation());
  }
  login_platform_ = from.login_platform_;
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.LoginData)
}

inline void LoginData::SharedCtor() {
s_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_platform_ = 0;
}

LoginData::~LoginData() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.LoginData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginData::ArenaDtor(void* object) {
  LoginData* _this = reinterpret_cast< LoginData* >(object);
  (void)_this;
}
void LoginData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.LoginData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_id_.ClearToEmpty();
  login_platform_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.LoginData.s_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 login_platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          login_platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.LoginData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_id = 1;
  if (!this->_internal_s_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_id().data(), static_cast<int>(this->_internal_s_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.LoginData.s_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_id(), target);
  }

  // int32 login_platform = 2;
  if (this->_internal_login_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_login_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.LoginData)
  return target;
}

size_t LoginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.LoginData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_id = 1;
  if (!this->_internal_s_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_id());
  }

  // int32 login_platform = 2;
  if (this->_internal_login_platform() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_login_platform());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginData::GetClassData() const { return &_class_data_; }

void LoginData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginData *>(to)->MergeFrom(
      static_cast<const LoginData &>(from));
}


void LoginData::MergeFrom(const LoginData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.LoginData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_id().empty()) {
    _internal_set_s_id(from._internal_s_id());
  }
  if (from._internal_login_platform() != 0) {
    _internal_set_login_platform(from._internal_login_platform());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginData::CopyFrom(const LoginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.LoginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginData::IsInitialized() const {
  return true;
}

void LoginData::InternalSwap(LoginData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_id_, lhs_arena,
      &other->s_id_, rhs_arena
  );
  swap(login_platform_, other->login_platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[7]);
}

// ===================================================================

class LoginResultData::_Internal {
 public:
};

LoginResultData::LoginResultData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.LoginResultData)
}
LoginResultData::LoginResultData(const LoginResultData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.LoginResultData)
}

inline void LoginResultData::SharedCtor() {
is_success_ = false;
}

LoginResultData::~LoginResultData() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.LoginResultData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginResultData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginResultData::ArenaDtor(void* object) {
  LoginResultData* _this = reinterpret_cast< LoginResultData* >(object);
  (void)_this;
}
void LoginResultData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginResultData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginResultData::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.LoginResultData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResultData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResultData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.LoginResultData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.LoginResultData)
  return target;
}

size_t LoginResultData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.LoginResultData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResultData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginResultData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResultData::GetClassData() const { return &_class_data_; }

void LoginResultData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginResultData *>(to)->MergeFrom(
      static_cast<const LoginResultData &>(from));
}


void LoginResultData::MergeFrom(const LoginResultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.LoginResultData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResultData::CopyFrom(const LoginResultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.LoginResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResultData::IsInitialized() const {
  return true;
}

void LoginResultData::InternalSwap(LoginResultData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_success_, other->is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResultData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[8]);
}

// ===================================================================

class NotiErrInfo::_Internal {
 public:
};

NotiErrInfo::NotiErrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.NotiErrInfo)
}
NotiErrInfo::NotiErrInfo(const NotiErrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_desc().empty()) {
    err_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&err_no_, &from.err_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_detail_) -
    reinterpret_cast<char*>(&err_no_)) + sizeof(err_detail_));
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.NotiErrInfo)
}

inline void NotiErrInfo::SharedCtor() {
err_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_detail_) -
    reinterpret_cast<char*>(&err_no_)) + sizeof(err_detail_));
}

NotiErrInfo::~NotiErrInfo() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.NotiErrInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotiErrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotiErrInfo::ArenaDtor(void* object) {
  NotiErrInfo* _this = reinterpret_cast< NotiErrInfo* >(object);
  (void)_this;
}
void NotiErrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotiErrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotiErrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.NotiErrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_desc_.ClearToEmpty();
  ::memset(&err_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_detail_) -
      reinterpret_cast<char*>(&err_no_)) + sizeof(err_detail_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotiErrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.NotiErrInfo.err_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotiErrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.NotiErrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_no = 1;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_no(), target);
  }

  // int32 err_detail = 2;
  if (this->_internal_err_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_detail(), target);
  }

  // string err_desc = 3;
  if (!this->_internal_err_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_desc().data(), static_cast<int>(this->_internal_err_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.NotiErrInfo.err_desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.NotiErrInfo)
  return target;
}

size_t NotiErrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.NotiErrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_desc = 3;
  if (!this->_internal_err_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_desc());
  }

  // int32 err_no = 1;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  // int32 err_detail = 2;
  if (this->_internal_err_detail() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_detail());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotiErrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotiErrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotiErrInfo::GetClassData() const { return &_class_data_; }

void NotiErrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotiErrInfo *>(to)->MergeFrom(
      static_cast<const NotiErrInfo &>(from));
}


void NotiErrInfo::MergeFrom(const NotiErrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.NotiErrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_desc().empty()) {
    _internal_set_err_desc(from._internal_err_desc());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  if (from._internal_err_detail() != 0) {
    _internal_set_err_detail(from._internal_err_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotiErrInfo::CopyFrom(const NotiErrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.NotiErrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiErrInfo::IsInitialized() const {
  return true;
}

void NotiErrInfo::InternalSwap(NotiErrInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_desc_, lhs_arena,
      &other->err_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotiErrInfo, err_detail_)
      + sizeof(NotiErrInfo::err_detail_)
      - PROTOBUF_FIELD_OFFSET(NotiErrInfo, err_no_)>(
          reinterpret_cast<char*>(&err_no_),
          reinterpret_cast<char*>(&other->err_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotiErrInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[9]);
}

// ===================================================================

class ReqPublicKey::_Internal {
 public:
};

ReqPublicKey::ReqPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ReqPublicKey)
}
ReqPublicKey::ReqPublicKey(const ReqPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ReqPublicKey)
}

inline void ReqPublicKey::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqPublicKey::~ReqPublicKey() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ReqPublicKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqPublicKey::ArenaDtor(void* object) {
  ReqPublicKey* _this = reinterpret_cast< ReqPublicKey* >(object);
  (void)_this;
}
void ReqPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ReqPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.ReqPublicKey.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ReqPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.ReqPublicKey.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ReqPublicKey)
  return target;
}

size_t ReqPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ReqPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqPublicKey::GetClassData() const { return &_class_data_; }

void ReqPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqPublicKey *>(to)->MergeFrom(
      static_cast<const ReqPublicKey &>(from));
}


void ReqPublicKey::MergeFrom(const ReqPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ReqPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqPublicKey::CopyFrom(const ReqPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ReqPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPublicKey::IsInitialized() const {
  return true;
}

void ReqPublicKey::InternalSwap(ReqPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPublicKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[10]);
}

// ===================================================================

class AnsPublicKey::_Internal {
 public:
};

AnsPublicKey::AnsPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.AnsPublicKey)
}
AnsPublicKey::AnsPublicKey(const AnsPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.AnsPublicKey)
}

inline void AnsPublicKey::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnsPublicKey::~AnsPublicKey() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.AnsPublicKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnsPublicKey::ArenaDtor(void* object) {
  AnsPublicKey* _this = reinterpret_cast< AnsPublicKey* >(object);
  (void)_this;
}
void AnsPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.AnsPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.AnsPublicKey.public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.AnsPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.AnsPublicKey.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.AnsPublicKey)
  return target;
}

size_t AnsPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.AnsPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsPublicKey::GetClassData() const { return &_class_data_; }

void AnsPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsPublicKey *>(to)->MergeFrom(
      static_cast<const AnsPublicKey &>(from));
}


void AnsPublicKey::MergeFrom(const AnsPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.AnsPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsPublicKey::CopyFrom(const AnsPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.AnsPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsPublicKey::IsInitialized() const {
  return true;
}

void AnsPublicKey::InternalSwap(AnsPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsPublicKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[11]);
}

// ===================================================================

class ReqConnect::_Internal {
 public:
};

ReqConnect::ReqConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ReqConnect)
}
ReqConnect::ReqConnect(const ReqConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ReqConnect)
}

inline void ReqConnect::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqConnect::~ReqConnect() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ReqConnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqConnect::ArenaDtor(void* object) {
  ReqConnect* _this = reinterpret_cast< ReqConnect* >(object);
  (void)_this;
}
void ReqConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ReqConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.ReqConnect.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ReqConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.ReqConnect.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ReqConnect)
  return target;
}

size_t ReqConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ReqConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqConnect::GetClassData() const { return &_class_data_; }

void ReqConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqConnect *>(to)->MergeFrom(
      static_cast<const ReqConnect &>(from));
}


void ReqConnect::MergeFrom(const ReqConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ReqConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqConnect::CopyFrom(const ReqConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ReqConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConnect::IsInitialized() const {
  return true;
}

void ReqConnect::InternalSwap(ReqConnect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqConnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[12]);
}

// ===================================================================

class AnsConnect::_Internal {
 public:
};

AnsConnect::AnsConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.AnsConnect)
}
AnsConnect::AnsConnect(const AnsConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.AnsConnect)
}

inline void AnsConnect::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_success_ = false;
}

AnsConnect::~AnsConnect() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.AnsConnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnsConnect::ArenaDtor(void* object) {
  AnsConnect* _this = reinterpret_cast< AnsConnect* >(object);
  (void)_this;
}
void AnsConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.AnsConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  is_success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.AnsConnect.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.AnsConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_success(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.AnsConnect.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.AnsConnect)
  return target;
}

size_t AnsConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.AnsConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bool is_success = 1;
  if (this->_internal_is_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsConnect::GetClassData() const { return &_class_data_; }

void AnsConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsConnect *>(to)->MergeFrom(
      static_cast<const AnsConnect &>(from));
}


void AnsConnect::MergeFrom(const AnsConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.AnsConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsConnect::CopyFrom(const AnsConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.AnsConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsConnect::IsInitialized() const {
  return true;
}

void AnsConnect::InternalSwap(AnsConnect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  swap(is_success_, other->is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsConnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[13]);
}

// ===================================================================

class ReqTestMsg::_Internal {
 public:
};

ReqTestMsg::ReqTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ReqTestMsg)
}
ReqTestMsg::ReqTestMsg(const ReqTestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ReqTestMsg)
}

inline void ReqTestMsg::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqTestMsg::~ReqTestMsg() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ReqTestMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqTestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqTestMsg::ArenaDtor(void* object) {
  ReqTestMsg* _this = reinterpret_cast< ReqTestMsg* >(object);
  (void)_this;
}
void ReqTestMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ReqTestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTestMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.ReqTestMsg.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqTestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ReqTestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.ReqTestMsg.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ReqTestMsg)
  return target;
}

size_t ReqTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ReqTestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqTestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqTestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqTestMsg::GetClassData() const { return &_class_data_; }

void ReqTestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqTestMsg *>(to)->MergeFrom(
      static_cast<const ReqTestMsg &>(from));
}


void ReqTestMsg::MergeFrom(const ReqTestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ReqTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqTestMsg::CopyFrom(const ReqTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ReqTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestMsg::IsInitialized() const {
  return true;
}

void ReqTestMsg::InternalSwap(ReqTestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTestMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[14]);
}

// ===================================================================

class AnsTestMsg::_Internal {
 public:
};

AnsTestMsg::AnsTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.AnsTestMsg)
}
AnsTestMsg::AnsTestMsg(const AnsTestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.AnsTestMsg)
}

inline void AnsTestMsg::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnsTestMsg::~AnsTestMsg() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.AnsTestMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsTestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnsTestMsg::ArenaDtor(void* object) {
  AnsTestMsg* _this = reinterpret_cast< AnsTestMsg* >(object);
  (void)_this;
}
void AnsTestMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsTestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.AnsTestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsTestMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserAndGameServer.AnsTestMsg.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsTestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.AnsTestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserAndGameServer.AnsTestMsg.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.AnsTestMsg)
  return target;
}

size_t AnsTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.AnsTestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsTestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsTestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsTestMsg::GetClassData() const { return &_class_data_; }

void AnsTestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsTestMsg *>(to)->MergeFrom(
      static_cast<const AnsTestMsg &>(from));
}


void AnsTestMsg::MergeFrom(const AnsTestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.AnsTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsTestMsg::CopyFrom(const AnsTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.AnsTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsTestMsg::IsInitialized() const {
  return true;
}

void AnsTestMsg::InternalSwap(AnsTestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsTestMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[15]);
}

// ===================================================================

class ReqChat::_Internal {
 public:
  static const ::UserAndGameServer::ChatData& chat_data(const ReqChat* msg);
};

const ::UserAndGameServer::ChatData&
ReqChat::_Internal::chat_data(const ReqChat* msg) {
  return *msg->chat_data_;
}
ReqChat::ReqChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ReqChat)
}
ReqChat::ReqChat(const ReqChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_data()) {
    chat_data_ = new ::UserAndGameServer::ChatData(*from.chat_data_);
  } else {
    chat_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ReqChat)
}

inline void ReqChat::SharedCtor() {
chat_data_ = nullptr;
}

ReqChat::~ReqChat() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ReqChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_data_;
}

void ReqChat::ArenaDtor(void* object) {
  ReqChat* _this = reinterpret_cast< ReqChat* >(object);
  (void)_this;
}
void ReqChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChat::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ReqChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && chat_data_ != nullptr) {
    delete chat_data_;
  }
  chat_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndGameServer.ChatData chat_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ReqChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndGameServer.ChatData chat_data = 1;
  if (this->_internal_has_chat_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ReqChat)
  return target;
}

size_t ReqChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ReqChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndGameServer.ChatData chat_data = 1;
  if (this->_internal_has_chat_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqChat::GetClassData() const { return &_class_data_; }

void ReqChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqChat *>(to)->MergeFrom(
      static_cast<const ReqChat &>(from));
}


void ReqChat::MergeFrom(const ReqChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ReqChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_data()) {
    _internal_mutable_chat_data()->::UserAndGameServer::ChatData::MergeFrom(from._internal_chat_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqChat::CopyFrom(const ReqChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ReqChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChat::IsInitialized() const {
  return true;
}

void ReqChat::InternalSwap(ReqChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(chat_data_, other->chat_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[16]);
}

// ===================================================================

class AnsChat::_Internal {
 public:
  static const ::UserAndGameServer::ChatData& chat_data(const AnsChat* msg);
};

const ::UserAndGameServer::ChatData&
AnsChat::_Internal::chat_data(const AnsChat* msg) {
  return *msg->chat_data_;
}
AnsChat::AnsChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.AnsChat)
}
AnsChat::AnsChat(const AnsChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_data()) {
    chat_data_ = new ::UserAndGameServer::ChatData(*from.chat_data_);
  } else {
    chat_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.AnsChat)
}

inline void AnsChat::SharedCtor() {
chat_data_ = nullptr;
}

AnsChat::~AnsChat() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.AnsChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_data_;
}

void AnsChat::ArenaDtor(void* object) {
  AnsChat* _this = reinterpret_cast< AnsChat* >(object);
  (void)_this;
}
void AnsChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsChat::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.AnsChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && chat_data_ != nullptr) {
    delete chat_data_;
  }
  chat_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndGameServer.ChatData chat_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.AnsChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndGameServer.ChatData chat_data = 1;
  if (this->_internal_has_chat_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.AnsChat)
  return target;
}

size_t AnsChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.AnsChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndGameServer.ChatData chat_data = 1;
  if (this->_internal_has_chat_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsChat::GetClassData() const { return &_class_data_; }

void AnsChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsChat *>(to)->MergeFrom(
      static_cast<const AnsChat &>(from));
}


void AnsChat::MergeFrom(const AnsChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.AnsChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_data()) {
    _internal_mutable_chat_data()->::UserAndGameServer::ChatData::MergeFrom(from._internal_chat_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsChat::CopyFrom(const AnsChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.AnsChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsChat::IsInitialized() const {
  return true;
}

void AnsChat::InternalSwap(AnsChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(chat_data_, other->chat_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[17]);
}

// ===================================================================

class ReqLogin::_Internal {
 public:
  static const ::UserAndGameServer::LoginData& login_data(const ReqLogin* msg);
};

const ::UserAndGameServer::LoginData&
ReqLogin::_Internal::login_data(const ReqLogin* msg) {
  return *msg->login_data_;
}
ReqLogin::ReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.ReqLogin)
}
ReqLogin::ReqLogin(const ReqLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_login_data()) {
    login_data_ = new ::UserAndGameServer::LoginData(*from.login_data_);
  } else {
    login_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.ReqLogin)
}

inline void ReqLogin::SharedCtor() {
login_data_ = nullptr;
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.ReqLogin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete login_data_;
}

void ReqLogin::ArenaDtor(void* object) {
  ReqLogin* _this = reinterpret_cast< ReqLogin* >(object);
  (void)_this;
}
void ReqLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.ReqLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && login_data_ != nullptr) {
    delete login_data_;
  }
  login_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndGameServer.LoginData login_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.ReqLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndGameServer.LoginData login_data = 1;
  if (this->_internal_has_login_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::login_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.ReqLogin)
  return target;
}

size_t ReqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.ReqLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndGameServer.LoginData login_data = 1;
  if (this->_internal_has_login_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *login_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqLogin::GetClassData() const { return &_class_data_; }

void ReqLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqLogin *>(to)->MergeFrom(
      static_cast<const ReqLogin &>(from));
}


void ReqLogin::MergeFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_login_data()) {
    _internal_mutable_login_data()->::UserAndGameServer::LoginData::MergeFrom(from._internal_login_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  return true;
}

void ReqLogin::InternalSwap(ReqLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(login_data_, other->login_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[18]);
}

// ===================================================================

class AnsLogin::_Internal {
 public:
  static const ::UserAndGameServer::LoginResultData& login_result_data(const AnsLogin* msg);
  static const ::UserAndGameServer::GameProfile& user_profile(const AnsLogin* msg);
  static const ::UserAndGameServer::Inventory& user_inventory(const AnsLogin* msg);
};

const ::UserAndGameServer::LoginResultData&
AnsLogin::_Internal::login_result_data(const AnsLogin* msg) {
  return *msg->login_result_data_;
}
const ::UserAndGameServer::GameProfile&
AnsLogin::_Internal::user_profile(const AnsLogin* msg) {
  return *msg->user_profile_;
}
const ::UserAndGameServer::Inventory&
AnsLogin::_Internal::user_inventory(const AnsLogin* msg) {
  return *msg->user_inventory_;
}
AnsLogin::AnsLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserAndGameServer.AnsLogin)
}
AnsLogin::AnsLogin(const AnsLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_login_result_data()) {
    login_result_data_ = new ::UserAndGameServer::LoginResultData(*from.login_result_data_);
  } else {
    login_result_data_ = nullptr;
  }
  if (from._internal_has_user_profile()) {
    user_profile_ = new ::UserAndGameServer::GameProfile(*from.user_profile_);
  } else {
    user_profile_ = nullptr;
  }
  if (from._internal_has_user_inventory()) {
    user_inventory_ = new ::UserAndGameServer::Inventory(*from.user_inventory_);
  } else {
    user_inventory_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserAndGameServer.AnsLogin)
}

inline void AnsLogin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&login_result_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_inventory_) -
    reinterpret_cast<char*>(&login_result_data_)) + sizeof(user_inventory_));
}

AnsLogin::~AnsLogin() {
  // @@protoc_insertion_point(destructor:UserAndGameServer.AnsLogin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnsLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete login_result_data_;
  if (this != internal_default_instance()) delete user_profile_;
  if (this != internal_default_instance()) delete user_inventory_;
}

void AnsLogin::ArenaDtor(void* object) {
  AnsLogin* _this = reinterpret_cast< AnsLogin* >(object);
  (void)_this;
}
void AnsLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnsLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnsLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:UserAndGameServer.AnsLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && login_result_data_ != nullptr) {
    delete login_result_data_;
  }
  login_result_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_profile_ != nullptr) {
    delete user_profile_;
  }
  user_profile_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_inventory_ != nullptr) {
    delete user_inventory_;
  }
  user_inventory_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnsLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserAndGameServer.LoginResultData login_result_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_result_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UserAndGameServer.GameProfile user_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UserAndGameServer.Inventory user_inventory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_inventory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnsLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAndGameServer.AnsLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserAndGameServer.LoginResultData login_result_data = 1;
  if (this->_internal_has_login_result_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::login_result_data(this), target, stream);
  }

  // .UserAndGameServer.GameProfile user_profile = 2;
  if (this->_internal_has_user_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_profile(this), target, stream);
  }

  // .UserAndGameServer.Inventory user_inventory = 3;
  if (this->_internal_has_user_inventory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_inventory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAndGameServer.AnsLogin)
  return target;
}

size_t AnsLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserAndGameServer.AnsLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserAndGameServer.LoginResultData login_result_data = 1;
  if (this->_internal_has_login_result_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *login_result_data_);
  }

  // .UserAndGameServer.GameProfile user_profile = 2;
  if (this->_internal_has_user_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_profile_);
  }

  // .UserAndGameServer.Inventory user_inventory = 3;
  if (this->_internal_has_user_inventory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_inventory_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnsLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnsLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnsLogin::GetClassData() const { return &_class_data_; }

void AnsLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnsLogin *>(to)->MergeFrom(
      static_cast<const AnsLogin &>(from));
}


void AnsLogin::MergeFrom(const AnsLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserAndGameServer.AnsLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_login_result_data()) {
    _internal_mutable_login_result_data()->::UserAndGameServer::LoginResultData::MergeFrom(from._internal_login_result_data());
  }
  if (from._internal_has_user_profile()) {
    _internal_mutable_user_profile()->::UserAndGameServer::GameProfile::MergeFrom(from._internal_user_profile());
  }
  if (from._internal_has_user_inventory()) {
    _internal_mutable_user_inventory()->::UserAndGameServer::Inventory::MergeFrom(from._internal_user_inventory());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnsLogin::CopyFrom(const AnsLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserAndGameServer.AnsLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsLogin::IsInitialized() const {
  return true;
}

void AnsLogin::InternalSwap(AnsLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnsLogin, user_inventory_)
      + sizeof(AnsLogin::user_inventory_)
      - PROTOBUF_FIELD_OFFSET(AnsLogin, login_result_data_)>(
          reinterpret_cast<char*>(&login_result_data_),
          reinterpret_cast<char*>(&other->login_result_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnsLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserAndGameServer_2eproto_getter, &descriptor_table_UserAndGameServer_2eproto_once,
      file_level_metadata_UserAndGameServer_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserAndGameServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ItemData* Arena::CreateMaybeMessage< ::UserAndGameServer::ItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::CostumeData* Arena::CreateMaybeMessage< ::UserAndGameServer::CostumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::CostumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::CharacterData* Arena::CreateMaybeMessage< ::UserAndGameServer::CharacterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::CharacterData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::Inventory* Arena::CreateMaybeMessage< ::UserAndGameServer::Inventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::Inventory >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::GameProfile* Arena::CreateMaybeMessage< ::UserAndGameServer::GameProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::GameProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ChatProfile* Arena::CreateMaybeMessage< ::UserAndGameServer::ChatProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ChatProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ChatData* Arena::CreateMaybeMessage< ::UserAndGameServer::ChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::LoginData* Arena::CreateMaybeMessage< ::UserAndGameServer::LoginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::LoginData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::LoginResultData* Arena::CreateMaybeMessage< ::UserAndGameServer::LoginResultData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::LoginResultData >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::NotiErrInfo* Arena::CreateMaybeMessage< ::UserAndGameServer::NotiErrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::NotiErrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ReqPublicKey* Arena::CreateMaybeMessage< ::UserAndGameServer::ReqPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ReqPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::AnsPublicKey* Arena::CreateMaybeMessage< ::UserAndGameServer::AnsPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::AnsPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ReqConnect* Arena::CreateMaybeMessage< ::UserAndGameServer::ReqConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ReqConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::AnsConnect* Arena::CreateMaybeMessage< ::UserAndGameServer::AnsConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::AnsConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ReqTestMsg* Arena::CreateMaybeMessage< ::UserAndGameServer::ReqTestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ReqTestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::AnsTestMsg* Arena::CreateMaybeMessage< ::UserAndGameServer::AnsTestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::AnsTestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ReqChat* Arena::CreateMaybeMessage< ::UserAndGameServer::ReqChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ReqChat >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::AnsChat* Arena::CreateMaybeMessage< ::UserAndGameServer::AnsChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::AnsChat >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::ReqLogin* Arena::CreateMaybeMessage< ::UserAndGameServer::ReqLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::ReqLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::UserAndGameServer::AnsLogin* Arena::CreateMaybeMessage< ::UserAndGameServer::AnsLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserAndGameServer::AnsLogin >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
